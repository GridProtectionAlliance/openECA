// COMPILER GENERATED CODE
// THIS WILL BE OVERWRITTEN AT EACH GENERATION
// EDIT AT YOUR OWN RISK

namespace {ProjectName}.Model

open System
open System.Collections.Generic
open System.Linq
open System.Runtime.CompilerServices
open ECAClientFramework
open ECAClientUtilities
open ECACommonUtilities
open ECACommonUtilities.Model
open {ProjectName}
open GSF.TimeSeries

[<CompilerGenerated>]
type public Mapper(framework : Framework, execute : {InputDataTypeName} * {InputMetaTypeName} -> {OutputDataTypeName} * {OutputMetaTypeName}) =
    inherit MapperBase(framework, SystemSettings.InputMapping)
    
    let m_execute = execute
    let m_unmapper = new Unmapper(framework, base.MappingCompiler)
    do base.Unmapper <- m_unmapper

    member public this.Unmapper = m_unmapper

    override this.Map(measurements) =
        this.SignalLookup.UpdateMeasurementLookup(measurements)
        let inputMapping = this.MappingCompiler.GetTypeMapping(this.InputMapping)
        
        base.Reset()
        let inputData = this.Create{InputCategoryIdentifier}{InputDataTypeIdentifier}(inputMapping)
        base.Reset()
        let inputMeta = this.Create{InputCategoryIdentifier}{InputMetaTypeIdentifier}(inputMapping)

        let (outputData, outputMeta) = m_execute(inputData, inputMeta)
        base.Subscriber.SendMeasurements(m_unmapper.Unmap(outputData, outputMeta))

        ()

    member private this.GetUDTArrayTypeMapping(arrayMapping : ArrayMapping, i : int) : TypeMapping =
        base.GetUDTArrayTypeMapping(arrayMapping, i - 1)

    member private this.GetArrayMeasurement(i : int) : IMeasurement =
        base.GetArrayMeasurement(i - 1)

    member private this.GetMetaValues(measurement : IMeasurement) : MetaValues =
        base.GetMetaValues(measurement)

    {MappingFunctions}
# COMPILER GENERATED CODE
# THIS WILL BE OVERWRITTEN AT EACH GENERATION
# EDIT AT YOUR OWN RISK

import clr

clr.AddReference('System')
clr.AddReference('System.Data')
clr.AddReference('System.Core')
clr.AddReference('ECAClientUtilities')
clr.AddReference('ECACommonUtilities')
clr.AddReference('GSF.TimeSeries')

from System import *
from System.Collections.Generic import *
from System.Linq import Enumerable
from ECAClientFramework import *
from ECAClientUtilities import *
from ECACommonUtilities import *
from ECACommonUtilities.Model import *
from GSF.TimeSeries import *
from Algorithm import Algorithm

class Unmapper(UnmapperBase): # For {ProjectName}
    def __new__(self, framework, mappingCompiler):
        obj = UnmapperBase.__new__(self, framework, mappingCompiler, SystemSettings.OutputMapping)
        Algorithm.CreateNewOutput = staticmethod(lambda: (obj.FillOutputData(), obj.FillOutputMeta()))
        return obj

    def FillOutputData(self):
        outputMapping = self.MappingCompiler.GetTypeMapping(self.OutputMapping)
        self.Reset()
        return self.Fill{OutputCategoryIdentifier}{OutputDataTypeIdentifier}(outputMapping)

    def FillOutputMeta(self):
        outputMapping = self.MappingCompiler.GetTypeMapping(self.OutputMapping)
        self.Reset()
        return self.Fill{OutputCategoryIdentifier}{OutputMetaTypeIdentifier}(outputMapping)

    def Unmap(self, outputData, outputMeta):
        measurements = List[IMeasurement]()
        outputMapping = self.MappingCompiler.GetTypeMapping(self.OutputMapping)

        self.CollectFrom{OutputCategoryIdentifier}{OutputDataTypeIdentifier}(measurements, outputMapping, outputData, outputMeta)

        return measurements

    {FillFunctions}

    {UnmappingFunctions}

# COMPILER GENERATED CODE
# THIS WILL BE OVERWRITTEN AT EACH GENERATION
# EDIT AT YOUR OWN RISK

import clr

clr.AddReference('System')
clr.AddReference('System.Data')
clr.AddReference('System.Core')
clr.AddReference('ECAClientUtilities')
clr.AddReference('ECACommonUtilities')
clr.AddReference('GSF.TimeSeries')

from System import *
from System.Collections.Generic import *
from System.Linq import Enumerable
from ECAClientFramework import *
from ECAClientUtilities import *
from ECACommonUtilities import *
from ECACommonUtilities.Model import *
from GSF.TimeSeries import *
from Algorithm import Algorithm
from Unmapper import Unmapper

class Mapper(MapperBase): # For {ProjectName}
    def __new__(self, framework):
        obj = MapperBase.__new__(self, framework, SystemSettings.InputMapping)
        obj.Unmapper = Unmapper(framework, obj.MappingCompiler)
        return obj

    def Map(self, measurements):
        self.SignalLookup.UpdateMeasurementLookup(measurements)
        inputMapping = self.MappingCompiler.GetTypeMapping(self.InputMapping)
        
        self.Reset()
        inputData = self.Create{InputCategoryIdentifier}{InputDataTypeIdentifier}(inputMapping)
        self.Reset()
        inputMeta = self.Create{InputCategoryIdentifier}{InputMetaTypeIdentifier}(inputMapping)

        (outputData, outputMeta) = Algorithm.Execute(inputData, inputMeta) # <- ({OutputDataTypeName}, {OutputMetaTypeName})
        self.Subscriber.SendMeasurements(self.Unmapper.Unmap(outputData, outputMeta))

    {MappingFunctions}

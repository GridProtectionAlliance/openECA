// COMPILER GENERATED CODE
// THIS WILL BE OVERWRITTEN AT EACH GENERATION
// EDIT AT YOUR OWN RISK

using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using ECAClientFramework;
using ECAClientUtilities;
using ECAClientUtilities.Model;
using GSF.TimeSeries;

namespace {ProjectName}.Model
{
    [CompilerGenerated]
    public class Mapper : MapperBase
    {
        #region [ Members ]

        // Fields
        private int m_index;

        #endregion

        #region [ Constructors ]

        public Mapper(SignalLookup lookup) : base(lookup, "{InputMapping}")
        {
        }

        #endregion

        #region [ Methods ]

        public override void Map(IDictionary<MeasurementKey, IMeasurement> measurements)
        {
            m_index = 0;
            SignalLookup.UpdateMeasurementLookup(measurements);
            TypeMapping inputMapping = MappingCompiler.GetTypeMapping(InputMapping);

            {InputTypeName} input = Create{InputCategoryIdentifier}{InputTypeIdentifier}(inputMapping);

            {OutputTypeName} output = Algorithm.Execute(input);

            // TODO: Later versions will publish output to the openECA server
        }

        {MappingFunctions}

        #endregion
    }
}

@*******************************************************************************************************
    //  GraphMeasurements.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@*@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json*@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Graph Measurements";

    DataHub.unsynchronizedInfo.FilterExpression = "PPA:2";

    if(!DataHub.subscriber.IsConnected)
    {
        DataHub.subscriber.Initialize();
        DataHub.subscriber.Start();
    }




}
@section StyleSheets {
    <style>
        /* Auto font resize CSS for system health window - targeting fixed 80 char width without wrap and
           allowing for responsive screen rearrangement when window is col-**-8 and on the right */
        @@media screen {
            .performance-statistics {
                font-size: 5.25px;
            }
        }

        @@media screen and (min-width: 430px) {
            .performance-statistics {
                font-size: 7px;
            }
        }

        @@media screen and (min-width: 470px) {
            .performance-statistics {
                font-size: 8px;
            }
        }

        @@media screen and (min-width: 515px) {
            .performance-statistics {
                font-size: 9px;
            }
        }

        @@media screen and (min-width: 550px) {
            .performance-statistics {
                font-size: 10px;
            }
        }

        @@media screen and (min-width: 600px) {
            .performance-statistics {
                font-size: 11px;
            }
        }

        @@media screen and (min-width: 635px) {
            .performance-statistics {
                font-size: 12px;
            }
        }

        @@media screen and (min-width: 685px) {
            .performance-statistics {
                font-size: 13px;
            }
        }

        @@media screen and (min-width: 725px) {
            .performance-statistics {
                font-size: 14px;
            }
        }

        @@media screen and (min-width: 768px) {
            .performance-statistics {
                font-size: 8px;
            }
        }

        @@media screen and (min-width: 992px) {
            .performance-statistics {
                font-size: 12px;
            }
        }

        @@media screen and (min-width: 1200px) {
            .performance-statistics {
                font-size: 14px;
            }
        }

        .badge-fixed {
            display: inline-block;
            width: 150px;
        }
    </style>
}
@section Scripts {
    <script>
        function updateTimestamps() {
            if (hubIsConnected) {
                dataHub.getMeasurements().done(function (id) { console.log(id); }).fail(function (data) { console.log(data); });
            }

            $('#body').append();

                if (hubIsConnected) {
   
                }
        }

        function updatePerformanceStatistics() {
            
        }

        $(window).on("hubConnected", function (event) {
            updatePerformanceStatistics();
            setInterval(updatePerformanceStatistics, 5000);
        });

        $("#restartButton").click(function () {
            if (hubIsConnected)
                serviceHub.sendCommand("restart");
        });

        $(function () {
            updateTimestamps();
            setInterval(updateTimestamps, 1000);
        });

        //$(window).resize(function () {
        //    $("#fontSizeLabel").html("Font Size: " + $("#performanceStatistics").css("font-size") + ", Window Size: " + $(window).width().toString());
        //});
    </script>
}

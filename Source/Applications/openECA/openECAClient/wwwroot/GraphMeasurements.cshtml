@*******************************************************************************************************
    //  GraphMeasurements.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@*@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json*@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Graph Measurements";
    ViewBag.PageHasSidebar = false;
    ViewBag.NoShowCase = true;
}
@section StyleSheets {
    <style>
       body {
  padding-top: 70px;
}
/*
 * Style tweaks
 * --------------------------------------------------
 */
html,
body {
  overflow-x: hidden; /* Prevent scroll on narrow devices */
  height: 100%;
}
body {
  padding-top: 70px;
}
footer {
  padding: 30px 0;
}

/*
 * Off Canvas
 * --------------------------------------------------
 * Greater thav 768px shows the menu by default and also flips the semantics
 * The issue is to show menu for large screens and to hide for small
 * Also need to do something clever to turn off the tabs for when the navigation is hidden
 * Otherwise keyboard users cannot find the focus point
 * (For now I will ignore that for mobile users and also not worry about
 * screen re-sizing popping the menu out.)
 */
@@media screen and (min-width: 768px) {
  .row-offcanvas {
    position: relative;
    -webkit-transition: all .25s ease-out;
       -moz-transition: all .25s ease-out;
            transition: all .25s ease-out;
  }

  .row-offcanvas-right {
    right: 25%;
  }

  .row-offcanvas-left {
    left: 25%;
  }

  .row-offcanvas-right .sidebar-offcanvas {
    right: -25%; /* 3 columns */
  	background-color: rgb(255, 255, 255);
  }

  .row-offcanvas-left .sidebar-offcanvas {
    left: -25%; /* 3 columns */
  	background-color: rgb(255, 255, 255);
  }

  .row-offcanvas-right.active {
    right: 0; /* 3 columns */
  }

  .row-offcanvas-left.active {
    left: 0; /* 3 columns */
  }

  .row-offcanvas-right.active .sidebar-offcanvas {
  	background-color: rgb(254, 254, 254);
  }
  .row-offcanvas-left.active .sidebar-offcanvas {
  	background-color: rgb(254, 254, 254);
  }

.row-offcanvas .content {
    width: 75%; /* 9 columns */
    -webkit-transition: all .25s ease-out;
       -moz-transition: all .25s ease-out;
            transition: all .25s ease-out;

  }

  .row-offcanvas.active .content {
    width: 100%; /* 12 columns */
  }
       
  .sidebar-offcanvas {
    position: absolute;
    top: 0;
    width: 25%; /* 3 columns */
  }
}
@@media screen and (max-width: 767px) {
  .row-offcanvas {
    position: relative;
    -webkit-transition: all .25s ease-out;
       -moz-transition: all .25s ease-out;
            transition: all .25s ease-out;
  }

  .row-offcanvas-right {
    right: 0;
  }

  .row-offcanvas-left {
    left: 0;
  }

  .row-offcanvas-right
  .sidebar-offcanvas {
    right: -50%; /* 6 columns */
  }

  .row-offcanvas-left
  .sidebar-offcanvas {
    left: -50%; /* 6 columns */
  }

  .row-offcanvas-right.active {
    right: 50%; /* 6 columns */
  }

  .row-offcanvas-left.active {
    left: 50%; /* 6 columns */
  }

  .sidebar-offcanvas {
    position: absolute;
    top: 0;
    width: 50%; /* 6 columns */
  }
}
    </style>
}

<div class="container-fluid">
    <div class="row row-offcanvas row-offcanvas-left">

        <div class="col-xs-6 col-sm-3 sidebar-offcanvas" style="overflow-y: scroll" id="sidebar" role="navigation">
            <ul id="devicelist" class="list-group"></ul>
        </div><!--/span-->
        <div class="col-xs-12 col-sm-9 content">
            <p class="pull-left">
                <button type="button" class="btn btn-primary btn-xs" data-toggle="offcanvas">Toggle Signals</button>
                <button type="button"class="btn btn-primary btn-xs" onclick="resetFilter()">Reset</button>
                <button type="button" class="btn btn-primary btn-xs" id="btnruntimestats">Runtime Stats</button>
                <h1>Graph Measurements</h1>
            </p>

            <div class="text-center" id="graphwrapper">
                <div class="col-md-9">
                    <div id="placeholder" style="width: 100%;"></div>
                </div>
                <div class="col-md-2">
                    <div id="legend" style="border: 1px solid black;"></div>
                </div>
            </div>
            <div id="modals"></div>

        </div><!--/span-->

    </div><!--/row-->

</div><!-- /.container -->

@section Scripts {
    <script src="~Scripts/flot/jquery.flot.js"></script>
    <script src="~Scripts/flot/jquery.flot.crosshair.js"></script>
    <script src="~Scripts/flot/jquery.flot.navigate.js"></script>
    <script src="~Scripts/flot/jquery.flot.resize.js"></script>
    <script src="~Scripts/flot/jquery.flot.selection.js"></script>
    <script src="~Scripts/flot/jquery.flot.time.js"></script>
    <script src="~Scripts/flot/jquery.flot.axislabels.js"></script>

    <script>    
        var plot;
        var updateInterval = 250;
        var plotData = [];
        var plotDataTemplate = [];
        var deviceData = [];
        var measurementDetails = [];
        var statFilter = "";
        var stats = [];
        var lightFilter = "";

        $(function () {
            
            setHeights();
            $(window).resize(function () { setHeights() } );

            $('[data-toggle=offcanvas]').click(function () {
                if ($('.sidebar-offcanvas').css('background-color') == 'rgb(255, 255, 255)') {
                    $('.list-group-item').attr('tabindex', '-1');
                } else {
                    $('.list-group-item').attr('tabindex', '');
                }
                $('.row-offcanvas').toggleClass('active');

            });


            $(window).on("hubConnected", function (event) {
                
                getStats();
                buildModal("runtimestats");
                setTimeout(function () {
                    dataHub.getDeviceDetails().done(function (data) {
                        deviceData = data;
                        deviceData.sort(function (a, b) {
                            if (a.Acronym > b.Acronym) return 1;
                            if (a.Acronym < b.Acronym) return -1;
                            
                            return 0;
                        });
                        $.each(deviceData, function (key, dd) {
                            var acronym = dd.Acronym.replace(/!/g, "-").replace(dd.Acronym.split('!')[0] + '-', "");
                            if (dd.Enabled == true) {
                                $('#devicelist').append('<li class="list-group-item" ><img id="img'+acronym+'" src="Images/StatusLights/grey.png" /><button class="btn btn-link btn-sm" style="font-size: x-small;" title="' + dd.Name + '" data-toggle="collapse" data-parent="#devicelist" data-target="#dd' + acronym + '">' + acronym + '</button><button id="btn'+ acronym +'" class="btn btn-xs badge" style="font-size: xx-small;">Stats</button><div id="dd' + acronym + '" class="collapse"><table class="table" style="width:15%; font-size: x-small;" id="tb' + acronym + '"  ><th>ID</th><th>Stream</th><th>Signal</th></table></li>');
                                buildModal(acronym);
                                $('#btn' + acronym).on("click", function () {
                                    $('#mod' + acronym).modal('show');
                                });
                                $('#btnruntimestats').on("click", function () {
                                    $('#modruntimestats').modal('show');
                                });

                            }

                        });

                    });

                    dataHub.getMeasurementDetails().done(function (data) {
                        measurementDetails = data;

                        measurementDetails.sort(function (a, b) {
                            if (a.ID > b.ID) return 1;
                            if (a.ID < b.ID) return -1;

                            return 0;
                        });
                        $.each(measurementDetails, function (i, md) {
                            var acronym = null;
                            if(md.DeviceAcronym != null)
                                acronym = md.DeviceAcronym.replace(/!/g, "-").replace(md.DeviceAcronym.split('!')[0] + '-', "");
                            if (!md.ID.includes("STAT") && md.SignalAcronym != "DIGI" && md.SignalAcronym != "FLAG" && md.SignalAcronym != "QUAL" && md.SignalAcronym != "STAT" && md.SignalAcronym != "ALOG") {
                                var sigref = md.SignalReference.replace(/!/g, "-");
                                sigref = sigref.replace(md.DeviceAcronym.replace(/!/g, "-") + "-", "");
                                var id = md.ID.split(":")[1];
                                lightFilter += md.ID + ';';
                                $('#tb' + acronym).append('<tr title="'+md.Description+'"><td nowrap><label class="checkbox-inline"><input type="checkbox" id="cb'+md.ID+'" value="' + md.ID + '#' + md.SignalID + '">'+ id + '</td><td>' + sigref+'</td><td>' + md.SignalAcronym + '</td></tr>');
                               
                                //$('<label />', { 'for': 'cb' + md.ID, text: md.SignalReference +  ' - ' + md.SignalAcronym }).appendTo(checklist);
                                //$('<br/>').appendTo(checklist);
                                var yaxisNum = 1;
                                if (md.SignalAcronym == "VPHM") yaxisNum = 2;
                                else if (md.SignalAcronym == "IPHM") yaxisNum = 3;
                                else if (md.SignalAcronym.includes("A")) yaxisNum = 4;


                                plotDataTemplate.push({ label: md.SignalID, yaxis: yaxisNum, data: [] });
                            }
                            else if (md.SignalAcronym == "STAT") {
                                if (md.Enabled == true) {
                                    statFilter += md.ID + ';';
                                    stats.push({ deviceAcronym: md.DeviceAcronym, id: md.SignalID, value: null, timestamp: null, description: md.Description });
                                    var index = stats.length - 1;
                                    if (md.DeviceAcronym == "VMDEV")
                                        $('#statruntimestats').append('<tr><td>' + md.ID.split(":")[1] + '</td><td id="des' + md.SignalID + '">' + md.Description.replace("Subscriber statistic for ", "") + '</td><td><span id="val' + md.SignalID + '" >' + stats[index].value + '</span></td><td><span id="time' + md.SignalID + '" >' + stats[index].timestamp + '</span></td></tr>');
                                    else if (md.DeviceAcronym != null){
                                        $('#stat' + acronym).append('<tr><td>' + md.ID.split(":")[1] + '</td><td id="des' + md.SignalID + '">' + md.Description.replace("Subscriber statistic for ", "") + '</td><td><span id="val' + md.SignalID + '" >' + stats[index].value + '</span></td><td><span id="time' + md.SignalID + '" >' + stats[index].timestamp + '</span></td></tr>');
                                    }
                                }
                            }
                                
                        });
                        $('input[type=checkbox]').each(function () {
                            $(this).change(function () { updateFilter() });

                        });
                        checkCookie();

                        //console.log(stats);
                        dataHub.statSubscribe(statFilter);
                        //console.log(lightFilter);
                        dataHub.lightSubscribe(lightFilter);
                        //dataHub.updateFilters(filterStr);
                        getLights();
                        $('#devicelist').tooltip();

                        dataHub.getMeasurements().done(function (data) {

                            $.each(data, function (i, d) {
                                for (var j in plotData) {
                                    if (plotData[j].label == d.ID) {
                                        plotData[j].data.push([d.Timestamp, d.Value]);
                                    }
                                }
                            });
                            

                            plot = $.plot("#placeholder", plotData, {
                                series: {
                                    shadowSize: 0
                                },
                                yaxes: [{
                                        show: true,
                                        position: "left",
                                        axisLabel: "Frequency"
                                    },{
                                        show: true,
                                        position: "left",
                                        axisLabel: "Voltage"
                                    }, {
                                        show: true,
                                        position: "right",
                                        axisLabel: "Current"
                                    }, {
                                        show: true,
                                        position: "right",
                                        axisLabel: "Angle"
                                    }
                                   
                                ],
                                xaxis: {
                                    mode: "time",
                                    timeformat: "%H:%M:%S",
                                    timezone: "browser"
                                },
                                legend: {
                                    show: true,
                                    container: $('#legend'),
                                    labelFormatter: function (label, series) {
                                        for (var i in measurementDetails)
                                        {
                                            if (measurementDetails[i].SignalID == label)
                                                return measurementDetails[i].SignalReference.split("!")[measurementDetails[i].SignalReference.split("!").length - 1] + " - " + measurementDetails[i].SignalAcronym;
                                        }
                                       
                                    },
                                    noColumns: 1,
                                    margin: 5
                                }
                            });
                            update();
                        });
                    });
                    
                   
                }, 2000);
 
                    
            }); 
            
            function getLights() {
                dataHub.getLights().done(function (data) {
                    $.each(data, function (iter, d) {
                        if (d.GoodData) {
                            $('#img' + d.DeviceAcronym.replace(/!/g, "-").replace(d.DeviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/green.png");
                        } else {
                            $('#img' + d.DeviceAcronym.replace(/!/g, "-").replace(d.DeviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/red.png");
                        }
                    });
                    setTimeout(getLights, 10000);
                });
               
            }

            function getStats() {
                dataHub.getStats().done(function (data) {
                    $.each(data, function (iter, d) {
                        for (var i in stats) {
                            if (stats[i].id == d.ID) {
                                stats[i].value = d.Value;
                                stats[i].timestamp = d.Timestamp;
                                //console.log(stats[i]);
                                if (stats[i].deviceAcronym == "VMDEV") {
                                    if ($('#des' + d.ID).text().includes("Boolean")) $('#val' + d.ID).text(Boolean(d.Value));
                                    else $('#val' + d.ID).text (d.Value);
                                    $('#time' + d.ID).text (new Date(d.Timestamp).formatDate(DateTimeFormat));

                                }
                                else if (stats[i].deviceAcronym != null) {
                                    if ($('#des' + d.ID).text().includes("Boolean")) $('#val' + d.ID).text(Boolean(d.Value));
                                    else $('#val' + d.ID).text(d.Value);
                                    $('#time' + d.ID).text(new Date(d.Timestamp).formatDate(DateTimeFormat));

                                }

                                break;
                            }
                        }



                    });

                    //console.log(stats);
                });
                setTimeout(getStats, 10000);
            }

            function update() {
                dataHub.getMeasurements().done(function (data) {
                    
                    $.each(data, function (i, d) {
                        for (var j in plotData) {
                            if (plotData[j].label == d.ID) {
                                plotData[j].data.push([d.Timestamp, d.Value]);
                            }
                        }
                    });
                    
                    for (var i = 0; i < plotData.length; ++ i) {
                        var num = (plotData[i].data.length - 200)
                        for (var j = 0; j <  num; ++j)
                            plotData[i].data.shift()

                    }

                    plot.setData(plotData);
                    plot.setupGrid()
                    plot.draw();
                    setTimeout(update, updateInterval);
                });
               
            }

            $(window).unload(function () {
                

                var filterStr = "";


                plotData = [];

                dataHub.updateFilters(filterStr);
                plot.setData(plotData);
                plot.setupGrid()
                plot.draw();
            });

        });

        function updateFilter() {
            var filterStr = "";

          
            plotData = [];
           
           

            $('input[type=checkbox]').each(function () {
                var arr = this.value.split('#');
                if (this.checked == true) {
                    filterStr += arr[0] + ";";
                    for (var i in plotDataTemplate) {
                        if (plotDataTemplate[i].label == arr[1])
                            plotData.push(plotDataTemplate[i]);

                    }
                }


            });
            setCookie("filterStr", filterStr, 365);
            dataHub.updateFilters(filterStr);
            plot.setData(plotData);
            plot.setupGrid()
            plot.draw();
            
           
        }
        
        function resetFilter() {
            var filterStr = "";
            setCookie("filterStr", filterStr, 365);

            for (var i = 0; i < plotData.length; ++i) {
                plotData[i].data = [];

            }



            $('input[type=checkbox]').each(function () {
                if (this.checked == true)
                    this.checked = false;


            });
            dataHub.updateFilters(filterStr);
            plot.setData(plotData);
            plot.setupGrid()
            plot.draw();


        }
        
        function buildModal(acronym) {
            $("#modals").append('<div id="' + acronym + '"></div>');
            html = '<div id="mod' + acronym + '" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">';
            html += '<div class="modal-dialog">';
            html += '<div class="modal-content">';
            html += '<div class="modal-header">';
            html += '<a class="close" data-dismiss="modal">×</a>';
            html += '<h4>' + acronym + ' Statistics</h4>'
            html += '</div>';
            html += '<div  class="modal-body" style="height: 300px; overflow-y: scroll" >';
            html += '<table id="stat' + acronym + '" class="table" style="font-size: x-small">';
            html += '<thead>Run-time Statistics:<thead />';
            html += '<tr><th>ID</th><th>Statistic</th><th>Value</th><th>TimeTag</th></tr>';
            html += '</table>';
            html += '</div>';
            html += '<div class="modal-footer">';
            html += '<span class="btn" data-dismiss="modal">Close</span>'; // close button
            html += '</div>';  // footer
            html += '</div>';  // modalWindow
            $('#'+acronym).html(html);
            $("#mod" + acronym).modal({ 'show': false });
        }
        
        function setCookie(cname, cvalue, exdays) {
            var d = new Date();
            d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
            var expires = "expires=" + d.toUTCString();
            //console.log(cname + "=" + cvalue.replace(/;/g, '#') + "; " + expires);
            document.cookie = cname + "=" + cvalue.replace(/;/g, '#') + "; " + expires;
        }

        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        function checkCookie() {
            filterStr = getCookie("filterStr").replace(/#/g, ';');
            //console.log(filterStr);
            var arr = filterStr.split(';');
            
            for(var i in arr)
            {
                $('input[type=checkbox]').each(function () {
                    if (this.id == 'cb' + arr[i]) {
                        this.checked = true;
                        var arr2 = this.value.split('#')
                        for (var j in plotDataTemplate) {
                            if (plotDataTemplate[j].label == arr2[1])
                                plotData.push(plotDataTemplate[j]);

                        }

                    }
                });
            }
            dataHub.updateFilters(filterStr);


        }
        
        function setHeights() {
            $('#sidebar').css('height', $('body').height());
            $('#graphwrapper').css('height', $('body').height());
            $('#placeholder').css('height', $('body').height() * 0.8);


        }
    </script>
}

@*******************************************************************************************************
//  GraphMeasurements.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Graph Measurements";
    ViewBag.SetFullWidth = true;
}
@section StyleSheets {
    <style>
        html {
            overflow-x: hidden;
            height: 100%;
        }

        body {
            overflow-x: hidden;
            overflow-y: hidden;
            height: 100%;
        }
        .col-md-3 {
            padding-left: 0;
            padding-right: 0;
        }
        .list-group {
            padding-left: 0px;
            margin-left: 0px;
        }
        .list-group-item {
            padding-left: 0px;
            margin-left: 0px;
        }
        .panel-body {
            padding: 0;
        }
        .panel-heading {
            padding: 0;
        }
        ul.nowrap {
            overflow: auto;
        }

        li.nowrap {
            white-space: nowrap;
        }

        #toggleCanvasButton {
            color: rgb(255, 255, 255);
            padding-bottom: 0px;
            padding-left: 3px;
            font-size: small;
            margin-left: -10px;
        }

        #toggleCanvasIcon {
            -webkit-transition: all 1.0s ease;
            -moz-transition: all 1.0s ease;
            -o-transition: all 1.0s ease;
            transition: all 1.0s ease;
        }

        .row-offcanvas.active #toggleCanvasIcon {
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);
            -webkit-transform: scale(1, -1);
            -moz-transform: scale(1, -1);
            -ms-transform: scale(1, -1);
            -o-transform: scale(1, -1);
            transform: scale(1, -1);
            padding-bottom: 1px;
            padding-left: 1px;
        }

        @@media screen and (min-width: 1250px) {          
            #toggleCanvasIcon {
                filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);
                -webkit-transform: scale(-1, 1);
                -moz-transform: scale(-1, 1);
                -ms-transform: scale(-1, 1);
                -o-transform: scale(-1, 1);
                transform: scale(-1, 1);
            }

            .row-offcanvas {
                position: relative;
                -webkit-transition: all .25s ease-out;
                -moz-transition: all .25s ease-out;
                transition: all .25s ease-out;
            }

            .row-offcanvas-right {
                right: 20%;
            }

            .row-offcanvas-left {
                left: 20%;
            }

            .row-offcanvas-right .sidebar-offcanvas {
                right: -20%; /* 3 columns */
                background-color: rgb(255, 255, 255);
            }

            .row-offcanvas-left .sidebar-offcanvas {
                left: -20%; /* 3 columns */
                background-color: rgb(255, 255, 255);
            }

            .row-offcanvas-right.active {
                right: 0; /* 3 columns */
            }

            .row-offcanvas-left.active {
                left: 0; /* 3 columns */
            }

            .row-offcanvas-right.active .sidebar-offcanvas {
                background-color: rgb(254, 254, 254);
            }

            .row-offcanvas-left.active .sidebar-offcanvas {
                background-color: rgb(254, 254, 254);
            }

            .row-offcanvas .content {
                width: 80%; /* 9 columns */
                -webkit-transition: all .25s ease-out;
                -moz-transition: all .25s ease-out;
                transition: all .25s ease-out;
            }

            .row-offcanvas.active .content {
                width: 100%; /* 12 columns */
            }

            .sidebar-offcanvas {
                position: absolute;
                top: 0;
                width: 20%; /* 3 columns */
            }
        }

        @@media screen and (max-width: 1249px) {
            #toggleCanvasIcon {
                filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);
                -webkit-transform: scale(1, -1);
                -moz-transform: scale(1, -1);
                -ms-transform: scale(1, -1);
                -o-transform: scale(1, -1);
                transform: scale(1, -1);
                padding-bottom: 1px;
                padding-left: 1px;
            }

            .row-offcanvas {
                position: relative;
                -webkit-transition: all .25s ease-out;
                -moz-transition: all .25s ease-out;
                transition: all .25s ease-out;
            }

            .row-offcanvas-right {
                right: 0;
            }

            .row-offcanvas-left {
                left: 0;
            }

            .row-offcanvas-right .sidebar-offcanvas {
                right: -50%; /* 6 columns */
            }

            .row-offcanvas-left .sidebar-offcanvas {
                left: -50%; /* 6 columns */
            }

            .row-offcanvas-right.active {
                right: 50%; /* 6 columns */
            }

            .row-offcanvas-left.active {
                left: 50%; /* 6 columns */
            }

            .sidebar-offcanvas {
                position: absolute;
                top: 0;
                width: 50%; /* 6 columns */
            }
        }
    </style>
}

<div class="container-fluid">
    <div class="row row-offcanvas row-offcanvas-left">
        <div ng-app="GraphMeasurements" ng-controller="MeasurementsCtrl">
            <div class="col-md-3 sidebar-offcanvas toggled" style="overflow-y: auto" id="sidebar" role="navigation">
                
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading" style="padding: 5px">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse1">Settings</a>
                            </h4>
                        </div>
                        <div id="collapse1" class="panel-collapse collapse" style="margin: 5px">
                            <label for="filterstring">Selected Measurements:</label>
                            <textarea id="filterstring" class="form-control" ng-model="filterstring" ng-change="updateSettings()" readonly></textarea>
                            <label for="datapoints">Number of Data Points to Plot:</label>
                            <input type="number" id="datapoints" ng-model="datapoints" ng-change="updateSettings()"class="form-control"/>
                            <label for="refreshinterval">Data Refresh Interval(ms):</label>
                            <input type="number" id="refreshinterval" ng-model="refreshinterval" ng-change="updateSettings()" class="form-control"/>
                            <label for="statrefreshinterval">Stat Refresh Interval(ms):</label>
                            <input type="number" id="statrefreshinterval" ng-model="statrefreshinterval" ng-change="updateSettings()" class="form-control"/>
                            @*<hr class="half-break" />
                            <button type="button" class="btn btn-primary btn-xs" onclick="updateSettings()">Update Settings</button>*@
                        </div>
                    </div>
                </div>

                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading" style="padding: 5px">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse2">Legend</a>
                            </h4>
                        </div>
                        <div id="collapse2" class="panel-collapse collapse" style="margin: 5px">
                            <div id="legend" style="overflow-y: scroll">
                                <table>
                                    <tr ng-repeat="x in legend"><td>{{x}}</td></tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <div ng-repeat="parentDevice in deviceData" class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <img id="img{{parentDevice.parent}}" src="Images/StatusLights/grey.png" style="padding-left: 6px"/>
                                <button class="btn btn-link btn-sm" style="font-size: x-small;" data-toggle="collapse" data-parent="#devicelist" data-target="#dd{{parentDevice.parent}}">{{parentDevice.parent}}</button>
                                <button id="btn{{parentDevice.parent}}" class="btn btn-xs badge pull-right" data-toggle="modal" data-target="#mod{{parentDevice.parent}}" style="font-size: xx-small; margin: 5px 15px 0 0">Stats</button>
                            </div>
                        </div>
                        <div class="panel-body">
                            <div id="dd{{parentDevice.parent}}" class="panel-collapse collapse in">
                                <ul class="list-group nowrap" id="parent{{parentDevice.parent}}">
                                    <li class="list-group-item nowrap" ng-repeat="device in parentDevice.devices">
                                        <img id="img{{ cleanIdentifier(device.Acronym)}}" src="Images/StatusLights/grey.png" style="padding-left: 5px" />
                                        <button class="btn btn-link btn-sm" style="font-size: x-small;" title="{{device.Name}}" data-toggle="collapse" data-target="#dd{{ cleanIdentifier(device.Acronym)}}">{{ cleanIdentifier(device.Acronym)}}</button>
                                        <button id="btn{{ cleanIdentifier(device.Acronym)}}" class="btn btn-xs badge" data-toggle="modal" data-target="#mod{{cleanIdentifier(device.Acronym)}}" style="font-size: xx-small;">Stats</button>
                                        <div id="dd{{ cleanIdentifier(device.Acronym)}}" class="collapse">
                                            <table class="table" style="width: 15%; font-size: x-small;" id="tb{{cleanIdentifier(device.Acronym)}}">
                                                <tr><th></th><th>ID</th><th>Stream</th><th>Signal</th><th></th></tr>
                                                <tr title="{{measurement.Description}}" ng-repeat="measurement in device.measurements">
                                                    <td>
                                                        <input type="checkbox" id="cb{{measurement.ID}}" value="{{measurement.ID}}#{{measurement.SignalID}}" ng-click="updateFilter()" hub-dependent/>
                                                    </td>
                                                    <td>{{measurement.ID.split(':')[1]}}</td>
                                                    <td>{{cleanSignalref(measurement)}}</td>
                                                    <td>{{measurement.SignalAcronym}}</td>
                                                    @*<td><button class="btn btn-xs badge" data-toggle="modal" data-target="#measmod{{measurement.SignalID}}" style="font-size: xx-small;">Stats</button></td>*@

                                                </tr>
                                            </table>
                                        </div>
                                        @*<div id="measmod{{ measurement.SignalID }}" ng-repeat="measurement in device.measurements"class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <a class="close" data-dismiss="modal">×</a>
                                                        <h4>{{ cleanIdentifier(measurement.DeviceAcronym) + ' ' + measurement.SignalAcronym}} Statistics</h4>
                                                    </div>
                                                    <div class="modal-body" style="height: 300px; overflow-y: scroll">
                                                        <table class="table" style="font-size: x-small">
                                                            <thead>Run-time Statistics:</thead>
                                                            <tr><th style="width: 10%">ID</th><th style="width: 70%">Statistic</th><th style="width: 10%">Value</th><th style="width: 10%">TimeTag</th></tr>
                                                            <tr ng-repeat="stat in measurement.stats" ng-if="stat.DeviceAcronym != null">
                                                                <td>{{stat.ID.split(":")[1]}}</td>
                                                                <td>{{stat.Description}}</td>
                                                                <td>{{stat.value}}</td>
                                                                <td>{{stat.timestamp}}</td>
                                                            </tr>
                                                        </table>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <span class="btn" data-dismiss="modal">Close</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>*@

                                        @*<div id="mod{{ cleanIdentifier(device.Acronym)}}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <a class="close" data-dismiss="modal">×</a>
                                                        <h4>{{ cleanIdentifier(device.Acronym)}} Statistics</h4>
                                                    </div>
                                                    <div class="modal-body" style="height: 300px; width: 100%; overflow-y: scroll">
                                                        <table id="stat{{ cleanIdentifier(device.Acronym)}}" class="table" style="font-size: x-small">
                                                            <thead>Run-time Statistics:</thead>
                                                            <tr><th style="width: 10%">ID</th><th style="width: 70%">Statistic</th><th style="width: 10%">Value</th><th style="width: 10%">TimeTag</th></tr>
                                                            <tr ng-repeat="stat in device.stats" ng-if="stat.DeviceAcronym != null">
                                                                <td>{{stat.ID.split(":")[1]}}</td>
                                                                <td>{{stat.Description}}</td>
                                                                <td>{{stat.value}}</td>
                                                                <td>{{formatDate(stat.timestamp)}}</td>
                                                            </tr>
                                                        </table>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <span class="btn" data-dismiss="modal">Close</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>*@

                                    </li>
                                </ul>
                            </div>
                        </div>

                        @*<div id="mod{{ cleanIdentifier(parentDevice.parent)}}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <a class="close" data-dismiss="modal">×</a>
                                        <h4>{{ cleanIdentifier(parentDevice.parent)}} Statistics</h4>
                                    </div>
                                    <div class="modal-body" style="height: 300px; overflow-y: scroll">
                                        <table id="stat{{ cleanIdentifier(parentDevice.parent)}}" class="table" style="font-size: x-small">
                                            <thead>Run-time Statistics:</thead>
                                            <tr><th style="width: 10%">ID</th><th style="width: 70%">Statistic</th><th style="width: 10%">Value</th><th style="width: 10%">TimeTag</th></tr>
                                            <tr ng-repeat="stat in parentDevice.stats" ng-if="stat.DeviceAcronym != null">
                                                <td>{{stat.ID.split(":")[1]}}</td>
                                                <td>{{stat.Description}}</td>
                                                <td>{{stat.value}}</td>
                                                <td>{{formatDate(stat.timestamp)}}</td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="modal-footer">
                                        <span class="btn" data-dismiss="modal">Close</span>
                                    </div>
                                </div>
                            </div>
                        </div>*@

                    </div>
                </div>

            </div><!--/span-->
        </div>

        <div class="col-md-9 content">
            <div class="pull-left">
                <button type="button" class="btn btn-primary btn-xs" data-toggle="offcanvas" id="toggleCanvasButton" title="Toggle Menu"><span class="glyphicon glyphicon-expand" id="toggleCanvasIcon"></span></button>
                <button type="button" class="btn btn-primary btn-xs" onclick="resetFilter()">Clear Signals</button>
            </div>
            <br/>
            <br/>
            <div class="text-center" id="graphwrapper">
                <div id="placeholder" style="width: 100%;"></div>
            </div>

        </div><!--/span-->

    </div><!--/row-->

</div><!-- /.container -->
<div id="modals">

</div>

@section Scripts {
    <script src="~Scripts/flot/jquery.flot.js"></script>
    <script src="~Scripts/flot/jquery.flot.crosshair.js"></script>
    <script src="~Scripts/flot/jquery.flot.navigate.js"></script>
    <script src="~Scripts/flot/jquery.flot.resize.js"></script>
    <script src="~Scripts/flot/jquery.flot.selection.js"></script>
    <script src="~Scripts/flot/jquery.flot.time.js"></script>
    <script src="~Scripts/flot/jquery.flot.axislabels.js"></script>

    <script>
        var plot;
        var updateInterval = 250;
        var plotData = [];
        var plotDataTemplate = [];
        var deviceData = [];
        var measurementDetails = [];
        var statFilter = "";
        var stats = [];
        var lightFilter = "";
        var parentDevice = [];
        var statRefreshInterval;
        var dataRefreshInterval;
        var dataPointNumber;
        
        var graphMeasurements = angular.module('GraphMeasurements', []);
        var MeasurementsCtrl = graphMeasurements.controller('MeasurementsCtrl', function ($scope) {
            $scope.filterstring = $.jStorage.get('filterStr');
            $scope.datapoints = parseInt($.jStorage.get('dataPointNumber'));
            $scope.refreshinterval = parseInt($.jStorage.get('dataRefreshInterval'));
            $scope.statrefreshinterval = parseInt($.jStorage.get('statRefreshInterval'));
            $scope.deviceData = [];
            $scope.measurementDetails = [];
            $scope.stats = [];
            
            // once the metadata is recieved being querying and parsing data
            $(window).on('metaDataReceived', function () {
                dataHub.getDeviceDetails().done(function (data) {
                    
                    data.sort(function (a, b) {
                        if (a.Acronym > b.Acronym) return 1;
                        if (a.Acronym < b.Acronym) return -1;

                        return 0;
                    });

                    $.each(data.map(function (d) { return d.ParentAcronym }).unique(), function (i, parentName) {
                        $scope.deviceData.push({ parent: (parentName === '' ? 'Unknown': parentName), devices: $.grep(data, function (d) { if (d.ParentAcronym === parentName) return d; }) });
                        buildModal((parentName === '' ? 'Unknown' : parentName));
                        $.each($scope.deviceData[$scope.deviceData.length - 1].devices, function (j, device) {
                            buildModal($scope.cleanIdentifier(device.Acronym));
                        });
                    });
                    
                    dataHub.getMeasurementDetails().done(function (measurementDetail) {
                        measurementDetail.sort(function (a, b) {
                            if (a.ID > b.ID) return 1;
                            if (a.ID < b.ID) return -1;

                            return 0;
                        });
                        
                        $.each($scope.deviceData, function (j, dd) {
                            dd.stats = [];
                            $.each(dd.devices, function (k, device) {
                                device.measurements = [];
                                device.stats = [];
                            });
                        });

                        $.each(measurementDetail, function (i, md) {
                            if (md.SignalAcronym != "DIGI" && md.SignalAcronym != "FLAG" && md.SignalAcronym != "QUAL" && md.SignalAcronym != "STAT" && md.SignalAcronym != "ALRM") {
                                $.each($scope.deviceData, function (j, dd) {
                                    $.each(dd.devices, function (k, device) {
                                        if (device.Acronym == md.DeviceAcronym) {
                                            md.stats = [];
                                            device.measurements.push(md);
                                        }
                                    });
                                });

                                lightFilter += md.ID + ';';

                                var yaxisNum = 1;
                                if (md.SignalAcronym == "VPHM") yaxisNum = 2;
                                else if (md.SignalAcronym == "IPHM") yaxisNum = 3;
                                else if (md.SignalAcronym == "Angle") yaxisNum = 4;
                                else if (md.SignalAcronym == "ALOG") yaxisNum = 5;

                                plotDataTemplate.push({ label: md.SignalID, yaxis: yaxisNum, data: [] });
                            }
                            else if (md.SignalAcronym == "STAT") {
                                if (md.Enabled == true) {
                                    statFilter += md.ID + ';';
                                    stats.push({ deviceAcronym: md.DeviceAcronym, id: md.SignalID, value: null, timestamp: null, description: md.Description });
                                    var index = stats.length - 1;
                                    if (parentDevice.indexOf(md.DeviceAcronym) != -1)
                                        $('#stat' + md.DeviceAcronym).append('<tr><td>' + md.ID.split(":")[1] + '</td><td id="des' + md.SignalID + '">' + md.Description + '</td><td><span id="val' + md.SignalID + '" >' + stats[index].value + '</span></td><td><span id="time' + md.SignalID + '" >' + stats[index].timestamp + '</span></td></tr>');
                                    else if (md.DeviceAcronym != null) {
                                        $('#stat' + $scope.cleanIdentifier(md.DeviceAcronym)).append('<tr><td>' + md.ID.split(":")[1] + '</td><td id="des' + md.SignalID + '">' + md.Description + '</td><td><span id="val' + md.SignalID + '" >' + stats[index].value + '</span></td><td><span id="time' + md.SignalID + '" >' + stats[index].timestamp + '</span></td></tr>');
                                    }
                                }
                            }

                        });
                        
                        getStats();

                        $scope.$apply();
                        
                        checkCookie();

                        dataHub.statSubscribe(statFilter);

                        $('#devicelist').tooltip();

                        dataHub.getMeasurements().done(function (data) {
                            buildPlot(data);
                            update();
                        });

                    }).fail(function (error) {
                        showErrorMessage(error);
                    });;

                    
                    
                }).fail(function (error) {
                    showErrorMessage(error);
                });

            });
            
            $scope.cleanIdentifier = function (identifier) {
                return identifier.replace(/!/g, "-").replace(identifier.split('!')[0] + '-', "");
            }
            
            $scope.cleanSignalref = function (object) {
                return object.SignalReference.replace(/!/g, "-").replace(object.DeviceAcronym.replace(/!/g, "-") + "-", "");
            }
        
            $scope.updateFilter = function () {
                updateFilter();
            }

            // function called to update settings on change from the inputs
            $scope.updateSettings = function () {
                dataRefreshInterval = $scope.refreshinterval;
                statRefreshInterval = $scope.statrefreshinterval;
                dataPointNumber = $scope.datapoints;
                filterStr = $scope.filterstring;

                $.jStorage.set("dataRefreshInterval", dataRefreshInterval);
                $.jStorage.set("statRefreshInterval", statRefreshInterval);
                $.jStorage.set("dataPointNumber", dataPointNumber);
                $.jStorage.set("filterStr", filterStr);
                
            };
            
            $scope.getStats = function() {
                if (!hubIsConnected)
                    return;

                dataHub.getStats().done(function (data) {
                    $.each(data, function (iter, d) {
                        var obj;
                        $.each($scope.deviceData, function (index, parent) {
                            $.each(parent.devices, function (_, device) {
                                $.each(device.stats, function (_, stat) {
                                    if (stat.SignalID == d.ID)
                                        obj = stat;
                                });

                            });

                        });

                        if (obj != undefined) {
                            obj.value = d.Value;
                            obj.timestamp = d.Timestamp;
                        }
        

                        //for (var i in stats) {
                        //    if (stats[i].id == d.ID) {
                        //        stats[i].value = d.Value;
                        //        stats[i].timestamp = d.Timestamp;
                            
                        //        if (stats[i].deviceAcronym != null) {
                        //            if ($('#des' + d.ID).text().indexOf("Boolean") >= 0 ) $('#val' + d.ID).text(Boolean(d.Value));
                        //            else $('#val' + d.ID).text(d.Value);
                        //            $('#time' + d.ID).text(new Date(d.Timestamp).formatDate(DateTimeFormat));
                        //            if (stats[i].description == "Device statistic for Number of measurements received from device during last reporting interval.") {
                        //                if (stats[i].value != null && stats[i].value > 0) {
                        //                    $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/green.png");
                        //                } else {
                        //                    $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/red.png");
                        //                }
                        //            }
                        //            if (stats[i].description == "Subscriber statistic for Number of processed measurements reported by the subscriber during last reporting interval.") {
                        //                if (stats[i].value != null && stats[i].value > 0) {
                        //                    $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/green.png");
                        //                } else {
                        //                    $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/red.png");
                        //                }
                        //            }


                        //        }

                        //        break;
                        //    }
                        //}



                    });
        
                    $scope.$apply();
                }).fail(function (error) {
                    showErrorMessage(error);
                });
                
                
                setTimeout($scope.getStats, statRefreshInterval);
            }
        
            $scope.formatDate = function (date) {
                return new Date(date).formatDate(DateTimeFormat);
            }
            
        });

        $(window).on("messageVisibiltyChanged", function (event) {
            setTimeout(function () {
                setHeights();
            }, 200);
        });

        $(function () {
            setHeights();

            $(window).resize(function () { setHeights() });
            
            $('[data-toggle=offcanvas]').click(function () {
                if ($('.sidebar-offcanvas').css('background-color') == 'rgb(255, 255, 255)') {
                    $('.list-group-item').attr('tabindex', '-1');
                } else {
                    $('.list-group-item').attr('tabindex', '');
                }
                $('.row-offcanvas').toggleClass('active');
            });

            $(document).on("hubConnected", function (event) {
                dataHub.initializeSubscriptions();
            });

            $(window).unload(function () {
                if (!hubIsConnected)
                    return;

                dataHub.terminateSubscriptions();
            });
            
            // Client function called from the dataHub when meta data gets recieved
            dataHubClient.metaDataReceived = function () {
                $(window).trigger('metaDataReceived');
                //buildModal("Subscription");
           }


        });
        
        
        
        // this will get the first set of data and build the plot
        function buildPlot(data) {
            $.each(data, function (i, d) {
                for (var j in plotData) {
                    if (plotData[j].label == d.ID) {
                        plotData[j].data.push([d.Timestamp, d.Value]);
                    }
                }
            });


            plot = $.plot("#placeholder", plotData, {
                series: {
                    shadowSize: 0
                },
                yaxes: [{
                    show: true,
                    position: "left",
                    axisLabel: "Frequency"
                }, {
                    show: true,
                    position: "left",
                    axisLabel: "Voltage"
                }, {
                    show: true,
                    position: "right",
                    axisLabel: "Current"
                }, {
                    show: true,
                    position: "right",
                    axisLabel: "Angle"
                }, {
                    show: true,
                    position: "right",
                    axisLabel: "Analog Data"
                }

                ],
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    timezone: "browser"
                },
                legend: {
                    show: true,
                    container: $('#legend'),
                    labelFormatter: function (label, series) {
                        for (var i in measurementDetails) {
                            if (measurementDetails[i].SignalID == label)
                                return measurementDetails[i].SignalReference.split("!")[measurementDetails[i].SignalReference.split("!").length - 1] + " - " + measurementDetails[i].SignalAcronym;
                        }

                    },
                    noColumns: 1,
                    margin: 5
                }
            });

        }
        
        // used to populate statistic modals
        function getStats() {
            if (!hubIsConnected)
                return;

            dataHub.getStats().done(function (data) {
                $.each(data, function (iter, d) {
                    for (var i in stats) {
                        if (stats[i].id == d.ID) {
                            stats[i].value = d.Value;
                            stats[i].timestamp = d.Timestamp;
                            
                            if (stats[i].deviceAcronym != null) {
                                if ($('#des' + d.ID).text().indexOf("Boolean") >= 0 ) $('#val' + d.ID).text(Boolean(d.Value));
                                else $('#val' + d.ID).text(d.Value);
                                $('#time' + d.ID).text(new Date(d.Timestamp).formatDate(DateTimeFormat));
                                if (stats[i].description == "Device statistic for Number of measurements received from device during last reporting interval.") {
                                    if (stats[i].value != null && stats[i].value > 0) {
                                        $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/green.png");
                                    } else {
                                        $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/red.png");
                                    }
                                }
                                if (stats[i].description == "Subscriber statistic for Number of processed measurements reported by the subscriber during last reporting interval.") {
                                    if (stats[i].value != null && stats[i].value > 0) {
                                        $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/green.png");
                                    } else {
                                        $('#img' + stats[i].deviceAcronym.replace(/!/g, "-").replace(stats[i].deviceAcronym.split('!')[0] + '-', "")).attr("src", "Images/StatusLights/red.png");
                                    }
                                }


                            }

                            break;
                        }
                    }



                });
            }).fail(function (error) {
                showErrorMessage(error);
            });

            setTimeout(getStats, statRefreshInterval);
        }
        
        // used to get data and update the plot
        function update() {
            if (!hubIsConnected)
                return;

            dataHub.getMeasurements().done(function (data) {

                $.each(data, function (i, d) {
                    for (var j in plotData) {
                        if (plotData[j].label == d.ID) {
                            plotData[j].data.push([d.Timestamp, d.Value]);
                        }
                    }
                });

                for (var i = 0; i < plotData.length; ++i) {
                    var num = (plotData[i].data.length - dataPointNumber)
                    for (var j = 0; j < num; ++j)
                        plotData[i].data.shift()

                }

                plot.setData(plotData);
                plot.setupGrid()
                plot.draw();
                setTimeout(update, dataRefreshInterval);
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }
        
        // used to update the data subscriper filter string with a new filter string 
        function updateFilter() {
            if (!hubIsConnected)
                return;

            var filterStr = "";


            plotData = [];



            $('input[type=checkbox]').each(function () {
                var arr = this.value.split('#');
                if (this.checked == true) {
                    filterStr += arr[0] + ";";
                    for (var i in plotDataTemplate) {
                        if (plotDataTemplate[i].label == arr[1])
                            plotData.push(plotDataTemplate[i]);
                    }
                }
            });

            $.jStorage.set("filterStr", filterStr);
            dataHub.updateFilters(filterStr);
            plot.setData(plotData);
            plot.setupGrid();
            plot.draw();
        }
        
        // used to reset the data subscriper filter string to an empty filter string
        function resetFilter() {
            if (!hubIsConnected)
                return;

            var filterStr = "";

            $.jStorage.set("filterStr", filterStr);

            for (var i = 0; i < plotData.length; ++i) {
                plotData[i].data = [];
            }

            $('input[type=checkbox]').each(function () {
                if (this.checked == true)
                    this.checked = false;
            });

            dataHub.updateFilters(filterStr);
            plot.setData(plotData);
            plot.setupGrid()
            plot.draw();
        }
        
        // used to build statistic modals
        function buildModal(acronym) {
            $("#modals").append('<div id="' + acronym + '"></div>');
            html = '<div id="mod' + acronym + '" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">';
            html += '<div class="modal-dialog">';
            html += '<div class="modal-content">';
            html += '<div class="modal-header">';
            html += '<a class="close" data-dismiss="modal">×</a>';
            html += '<h4>' + acronym + ' Statistics</h4>'
            html += '</div>';
            html += '<div  class="modal-body" style="height: 300px; overflow-y: scroll" >';
            html += '<table id="stat' + acronym + '" class="table" style="font-size: x-small">';
            html += '<thead>Run-time Statistics:<thead />';
            html += '<tr><th>ID</th><th>Statistic</th><th>Value</th><th>TimeTag</th></tr>';
            html += '</table>';
            html += '</div>';
            html += '<div class="modal-footer">';
            html += '<span class="btn" data-dismiss="modal">Close</span>'; // close button
            html += '</div>';  // footer
            html += '</div>';  // modalWindow
            $('#' + acronym).html(html);
            $("#mod" + acronym).modal({ 'show': false });
        }
              
        
        // used to check cookie
        function checkCookie() {
            if (!hubIsConnected)
                return;
            
            if ($.jStorage.get("filterStr") != null)
                filterStr = $.jStorage.get("filterStr").replace(/#/g, ';');
            else
                filterStr = '';
            $('#filterstring').val(filterStr);
            //console.log(filterStr);
            
            if ($.jStorage.get("dataRefreshInterval") != null)
                dataRefreshInterval = $.jStorage.get("dataRefreshInterval");
            else
                dataRefreshInterval = 250;
            $('#refreshinterval').val(dataRefreshInterval);

            if ($.jStorage.get("statRefreshInterval") != null)
                statRefreshInterval = $.jStorage.get("statRefreshInterval");
            else
                statRefreshInterval = 10000;
            $('#statrefreshinterval').val(statRefreshInterval);
            
            if ($.jStorage.get("dataPointNumber") != null)
                dataPointNumber = $.jStorage.get("dataPointNumber");
            else
                dataPointNumber = 300;
            $('#datapoints').val(dataPointNumber);

            var arr = filterStr.split(';');

            for (var i in arr) {
                $('input[type=checkbox]').each(function () {
                    if (this.id == 'cb' + arr[i]) {
                        this.checked = true;
                        var arr2 = this.value.split('#')
                        for (var j in plotDataTemplate) {
                            if (plotDataTemplate[j].label == arr2[1])
                                plotData.push(plotDataTemplate[j]);

                        }

                    }
                });
            }

            dataHub.updateFilters(filterStr);
        }
        
        // sets heights of various objects
        function setHeights() {
            const height = $(document).innerHeight() - 100;
            $('#sidebar').css('height', height);
            $('#graphwrapper').css('height', height);
            $('#placeholder').css('height', height * 0.8);
        }
        
        
        Array.prototype.contains = function (v) {
            for (var i = 0; i < this.length; i++) {
                if (this[i] === v) return true;
            }
            return false;
        };

        Array.prototype.unique = function () {
            var arr = [];
            for (var i = 0; i < this.length; i++) {
                if (!arr.contains(this[i])) {
                    arr.push(this[i]);
                }
            }
            return arr;
        }
    </script>
}

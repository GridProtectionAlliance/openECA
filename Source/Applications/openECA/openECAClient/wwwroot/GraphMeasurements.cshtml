@*******************************************************************************************************
    //  GraphMeasurements.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@*@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json*@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Graph Measurements";
}
@section StyleSheets {
    <style>
        label {
    display: inline-block;
    width: 5em;
  }
         
    </style>
}
<div class="responsive">
    <div class="row">
        <div class="col-md-3">
            <button class="btn btn-primary" onclick="updateFilter()">Update</button>
            <button class="btn btn-primary" onclick="resetFilter()">Reset</button>
            <br />
            <div style="overflow: scroll; height: 500px">
                <ul id="devicelist" class="list-group"></ul>
            </div>

        </div>
        <div class="col-md-9">
            <div id="placeholder" style="width: 100%; height: 500px"></div>
            <div id="legend" style="border: 1px solid black;"></div>
        </div>

    </div>
    <div class="row">
        <table class="table" id="runtimestats">
            <thead>Run-time Statistics:
            <thead />
            <r><th>ID</th><th>Statistic</th><th>Value</th><th>TimeTag</th></r>
        </table>
    </div>
    <div id="modals"></div>
</div>
@section Scripts {
    <script src="~Scripts/flot/jquery.flot.js"></script>
    <script src="~Scripts/flot/jquery.flot.crosshair.js"></script>
    <script src="~Scripts/flot/jquery.flot.navigate.js"></script>
    <script src="~Scripts/flot/jquery.flot.resize.js"></script>
    <script src="~Scripts/flot/jquery.flot.selection.js"></script>
    <script src="~Scripts/flot/jquery.flot.time.js"></script>
    <script src="~Scripts/flot/jquery.flot.axislabels.js"></script>

    <script>    
        var plot;
        var updateInterval = 250;
        var plotData = [];
        var plotDataTemplate = [];
        var deviceData = [];
        var measurementDetails = [];
        var statFilter = "";
        var stats = [];

        $(function () {



            $(window).on("hubConnected", function (event) {
                
                getStats();

                setTimeout(function () {
                    dataHub.getDeviceDetails().done(function (data) {
                        deviceData = data;
                        deviceData.sort(function (a, b) {
                            if (a.Acronym > b.Acronym) return 1;
                            if (a.Acronym < b.Acronym) return -1;
                            
                            return 0;
                        });
                        $.each(deviceData, function (key, dd) {
                            var acronym = dd.Acronym.replace(/!/g, "-").replace(dd.Acronym.split('!')[0] + '-', "");
                            if (dd.Enabled == true) {
                                $('#devicelist').append('<li class="list-group-item" ><button class="btn btn-link btn-sm" title="' + dd.Name + '" data-toggle="collapse" data-target="#dd' + acronym + '">' + acronym + '</button><button id="btn'+ acronym +'" class="btn btn-xs" style="font-size: xx-small;">Stats</button><div id="dd' + acronym + '" class="collapse"><table class="table" style="width:15%" id="tb' + acronym + '" border="1" ><th>ID</th><th>Stream</th><th>Signal</th></table></li>');
                                buildModal(acronym);
                                $('#btn' + acronym).on("click", function () {
                                    $('#mod' + acronym).modal('show');
                                });
                            }

                        });

                    });

                    dataHub.getMeasurementDetails().done(function (data) {
                        measurementDetails = data;

                        measurementDetails.sort(function (a, b) {
                            if (a.ID > b.ID) return 1;
                            if (a.ID < b.ID) return -1;

                            return 0;
                        });
                        $.each(measurementDetails, function (i, md) {
                            var acronym = null;
                            if(md.DeviceAcronym != null)
                                acronym = md.DeviceAcronym.replace(/!/g, "-").replace(md.DeviceAcronym.split('!')[0] + '-', "");
                            if (!md.ID.includes("STAT") && md.SignalAcronym != "DIGI" && md.SignalAcronym != "FLAG" && md.SignalAcronym != "QUAL" && md.SignalAcronym != "STAT" && md.SignalAcronym != "ALOG") {
                                var sigref = md.SignalReference.replace(/!/g, "-");
                                sigref = sigref.replace(acronym + "-", "");
                                var id = md.ID.split(":")[1];
                               
                                $('#tb' + acronym).append('<tr title="'+md.Description+'"><td nowrap><label class="checkbox-inline"><input type="checkbox" id="cb' + md.ID +'" value="' + md.ID + '#' + md.SignalID + '">'+ id + '</td><td>' + sigref+'</td><td>' + md.SignalAcronym + '</td></tr>');
                               
                                //$('<label />', { 'for': 'cb' + md.ID, text: md.SignalReference +  ' - ' + md.SignalAcronym }).appendTo(checklist);
                                //$('<br/>').appendTo(checklist);
                                var yaxisNum = 1;
                                if (md.SignalAcronym == "VPHM") yaxisNum = 2;
                                else if (md.SignalAcronym == "IPHM") yaxisNum = 3;
                                else if (md.SignalAcronym.includes("A")) yaxisNum = 4;


                                plotDataTemplate.push({ label: md.SignalID, yaxis: yaxisNum, data: [] });
                            }
                            else if (md.SignalAcronym == "STAT") {
                                if (md.Enabled == true) {
                                    statFilter += md.ID + ';';
                                    stats.push({ deviceAcronym: md.DeviceAcronym, id: md.SignalID, value: null, timestamp: null, description: md.Description });
                                    var index = stats.length - 1;
                                    if (md.DeviceAcronym == "VMDEV")
                                        $('#runtimestats').append('<tr><td>' + md.ID.split(":")[1] + '</td><td id="des' + md.SignalID + '">' + md.Description.replace("Subscriber statistic for ", "") + '</td><td><span id="val' + md.SignalID + '" >' + stats[index].value + '</span></td><td><span id="time' + md.SignalID + '" >' + stats[index].timestamp + '</span></td></tr>');
                                    else if (md.DeviceAcronym != null){
                                        $('#stat' + acronym).append('<tr><td>' + md.ID.split(":")[1] + '</td><td id="des' + md.SignalID + '">' + md.Description.replace("Subscriber statistic for ", "") + '</td><td><span id="val' + md.SignalID + '" >' + stats[index].value + '</span></td><td><span id="time' + md.SignalID + '" >' + stats[index].timestamp + '</span></td></tr>');
                                    }
                                }
                            }
                                
                        });
                        
                        //console.log(stats);
                        dataHub.statSubscribe(statFilter);
                        $('#devicelist').tooltip();

                        dataHub.getMeasurements().done(function (data) {

                            $.each(data, function (i, d) {
                                for (var j in plotData) {
                                    if (plotData[j].label == d.ID) {
                                        plotData[j].data.push([d.Timestamp, d.Value]);
                                    }
                                }
                            });
                            

                            plot = $.plot("#placeholder", plotData, {
                                series: {
                                    shadowSize: 0
                                },
                                yaxes: [{
                                        show: true,
                                        position: "left",
                                        axisLabel: "Frequency"
                                    },{
                                        show: true,
                                        position: "left",
                                        axisLabel: "Voltage"
                                    }, {
                                        show: true,
                                        position: "right",
                                        axisLabel: "Current"
                                    }, {
                                        show: true,
                                        position: "right",
                                        axisLabel: "Angle"
                                    }
                                   
                                ],
                                xaxis: {
                                    mode: "time",
                                    timeformat: "%H:%M:%S",
                                    timezone: "browser"
                                },
                                legend: {
                                    show: true,
                                    container: $('#legend'),
                                    labelFormatter: function (label, series) {
                                        for (var i in measurementDetails)
                                        {
                                            if (measurementDetails[i].SignalID == label)
                                                return measurementDetails[i].SignalReference.split("!")[measurementDetails[i].SignalReference.split("!").length - 1] + " - " + measurementDetails[i].SignalAcronym;
                                        }
                                       
                                    },
                                    noColumns: 1,
                                    margin: 5
                                }
                            });
                            update();
                        });
                    });
                    
                   
                }, 2000);
 
                    
            }); 
            
            function getStats() {
                dataHub.getStats().done(function (data) {
                    $.each(data, function (iter, d) {
                        for (var i in stats) {
                            if (stats[i].id == d.ID) {
                                stats[i].value = d.Value;
                                stats[i].timestamp = d.Timestamp;
                                //console.log(stats[i]);
                                if (stats[i].deviceAcronym == "VMDEV") {
                                    if ($('#des' + d.ID).text().includes("Boolean")) $('#val' + d.ID).text(Boolean(d.Value));
                                    else $('#val' + d.ID).text (d.Value);
                                    $('#time' + d.ID).text (new Date(d.Timestamp).formatDate(DateTimeFormat));

                                }
                                else if (stats[i].deviceAcronym != null) {
                                    if ($('#des' + d.ID).text().includes("Boolean")) $('#val' + d.ID).text(Boolean(d.Value));
                                    else $('#val' + d.ID).text(d.Value);
                                    $('#time' + d.ID).text(new Date(d.Timestamp).formatDate(DateTimeFormat));

                                }

                                break;
                            }
                        }



                    });

                    //console.log(stats);
                });
                setTimeout(getStats, 10000);
            }

            function update() {
                dataHub.getMeasurements().done(function (data) {
                    
                    $.each(data, function (i, d) {
                        for (var j in plotData) {
                            if (plotData[j].label == d.ID) {
                                plotData[j].data.push([d.Timestamp, d.Value]);
                            }
                        }
                    });
                    
                    for (var i = 0; i < plotData.length; ++ i) {
                        var num = (plotData[i].data.length - 200)
                        for (var j = 0; j <  num; ++j)
                            plotData[i].data.shift()

                    }

                    plot.setData(plotData);
                    plot.setupGrid()
                    plot.draw();
                    setTimeout(update, updateInterval);
                });
               
            }

            $(window).unload(function () {
                var filterStr = "";


                plotData = [];

                dataHub.updateFilters(filterStr);
                plot.setData(plotData);
                plot.setupGrid()
                plot.draw();
            });

        });

        function updateFilter() {
            var filterStr = "";

          
            plotData = [];
           
           

            $('input[type=checkbox]').each(function () {
                var arr = this.value.split('#');
                if (this.checked == true) {
                    filterStr += arr[0] + ";";
                    for (var i in plotDataTemplate) {
                        if (plotDataTemplate[i].label == arr[1])
                            plotData.push(plotDataTemplate[i]);

                    }
                }


            });
            dataHub.updateFilters(filterStr);
            plot.setData(plotData);
            plot.setupGrid()
            plot.draw();
            
           
        }
        
        function resetFilter() {
            var filterStr = "";


            for (var i = 0; i < plotData.length; ++i) {
                plotData[i].data = [];

            }



            $('input[type=checkbox]').each(function () {
                if (this.checked == true)
                    this.checked = false;


            });
            dataHub.updateFilters(filterStr);
            plot.setData(plotData);
            plot.setupGrid()
            plot.draw();


        }
        
        function buildModal(acronym) {
            $("#modals").append('<div id="' + acronym + '"></div>');
            html = '<div id="mod' + acronym + '" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">';
            html += '<div class="modal-dialog">';
            html += '<div class="modal-content">';
            html += '<div class="modal-header">';
            html += '<a class="close" data-dismiss="modal">×</a>';
            html += '<h4>' + acronym + ' Statistics</h4>'
            html += '</div>';
            html += '<div  class="modal-body">';
            html += '<table id="stat'+acronym+'" class="table" id="runtimestats">';
            html += '<thead>Run-time Statistics:<thead />';
            html += '<tr><th>ID</th><th>Statistic</th><th>Value</th><th>TimeTag</th></tr>';
            html += '</table>';
            html += '</div>';
            html += '<div class="modal-footer">';
            html += '<span class="btn" data-dismiss="modal">Close</span>'; // close button
            html += '</div>';  // footer
            html += '</div>';  // modalWindow
            $('#'+acronym).html(html);
            $("#mod" + acronym).modal({ 'show': false });
        }

    </script>
}

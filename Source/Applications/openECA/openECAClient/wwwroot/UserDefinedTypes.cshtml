@*******************************************************************************************************
    //  UserDefinedTypes.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@*@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json*@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "User Defined Types";

}
@section StyleSheets{
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}
<div class="row">
    <div class="col-md-2">
        <label for="namespace">Namespace:</label>
        <input class="form-control" type="text" id="namespace">
    </div>
    <div class="col-md-2">
        <label for="identifier">Type Identifier:</label>
        <input class="form-control" type="text" id="identifier">
    </div>

</div>

<div class="row">
    <div class="col-md-3">
        <label for="fields">Fields:</label>
        <div class="well">
            <ul class="list-group" id="fields"></ul>
        </div>
    </div>
    <div class="col-md-2">
        <label for="types">Types:</label>
        <select class="form-control" id="types"></select>
    </div>
    <div class="col-md-2">
        <label for="fieldidentifier">Field Identifier:</label>
        <input class="form-control" type="text" id="fieldidentifier"/>
    </div>
    <div class="col-md-1">
        <br/>
        <input class="btn btn-primary" type="button" id="addnewfield" value="Add Field"/>
    </div>

</div>
<div class="row">
    <div class="col-md-12">
        <input class="btn btn-primary" type="button" id="addnewtype" value="Add Type"/>
    </div>
</div>


<div class="row">
    <div class="col-md-12">
        <label for="userdefinedtypes">User Defined Types:</label>
        <table class="table" id="userdefinedtypes">
            <tr><th>Category</th><th>Identifier</th></tr>
        </table>
    </div>
</div>



@section Scripts {
    <script>
        var fieldsToAdd = [];

        $(function () {
            $(window).on("hubConnected", function (event) {
                dataHub.getDefinedTypes().done(function (data) {
                    //console.log(data);
                    $.each(data, function (i, d) {
                        $('#types').append($('<option />').val(d.Category+'~'+d.Identifier+'~'+d.IsArray+'~'+d.IsUserDefined).text(d.Identifier));
                        if(d.IsUserDefined)
                            $('#userdefinedtypes').append($('<tr><td>' + d.Category + '</td><td>' + d.Identifier + '</td></tr>' ));
                    });
                });
            });
            
            $('#addnewfield').on('click', function (event) {
                if ($('#fieldidentifier').val() != '') {
                    var flag = false;
                    $.each(fieldsToAdd, function (i, d) {
                        if (d.Type.Identifier == $('#types').val().split('~')[1] && d.Identifier == $('#fieldidentifier').val())
                            flag = true;
                    });
                    if (!flag) {
                        var vals = $('#types').val().split('~');
                        fieldsToAdd.push({'Type': { 'Category': vals[0], 'Identifier': vals[1], 'IsArray': vals[2], 'IsUserDefined': vals[3]}, 'Identifier':$('#fieldidentifier').val() });

                    }
                    UpdateFieldList();
                }
            });
            
            $('#addnewtype').on('click', function (event) {
                if ($('#namespace').val() != '' && $('#identifier').val() != '' && fieldsToAdd.length != 0) {
                    var newType = { 'Category': $('#namespace').val(), 'Identifier': $('#identifier').val(), 'Fields': [] };
                    $.each(fieldsToAdd, function (i, d) {
                        newType.Fields.push(d);
                    });
                    dataHub.addUDT(newType).done(function () {
                        dataHub.writeUDTFile().done(function () {
                                location.reload();
                        });
                    });

                }
            });
        });
    
        function UpdateFieldList() {
            $('#fields').empty();
            $.each(fieldsToAdd, function (i, data) {
                $('#fields').append($('<li class="list-group-item"><button class="btn btn-link" onclick="RemoveListItem('+ i+')"><span class="glyphicon glyphicon-remove-sign"></span></button>' + data.Type.Identifier + ' ' + data.Identifier + '</li>'));
            });
        }
    
        function RemoveListItem(index) {
            fieldsToAdd.splice(index, 1);
            UpdateFieldList();
        }
    </script>
}

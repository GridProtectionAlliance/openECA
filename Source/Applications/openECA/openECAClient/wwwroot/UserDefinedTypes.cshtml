@*******************************************************************************************************
    //  UserDefinedTypes.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@*@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json*@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "User Defined Types";

}
@section StyleSheets{
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}
<div id="typeident" class="row">
    <div class="col-md-2">
        <label for="namespace">Namespace:</label>
        <input class="form-control" type="text" id="namespace">
    </div>
    <div class="col-md-2">
        <label for="identifier">Type Identifier:</label>
        <input class="form-control" type="text" id="identifier">
    </div>

</div>

<div class="row">
    <div class="col-md-3">
        <label for="fields">Fields:</label>
        <div class="well" id="fieldwell">
            <ul class="list-group" id="fields"></ul>
        </div>
    </div>
    <div class="col-md-2">
        <label for="types">Types:</label>
        <select class="form-control" id="types"></select>
    </div>
    <div class="col-md-2">
        <label for="fieldidentifier">Field Identifier:</label>
        <input class="form-control" type="text" id="fieldidentifier"/>
    </div>
    <div class="col-md-1">
        <br/>
        <input class="btn btn-primary" type="button" id="addnewfield" value="Add Field"/>
    </div>

</div>
<div class="row">
    <div class="col-md-12">
        <input class="btn btn-primary" type="button" id="addnewtype" value="Add Type"/>
    </div>
</div>


<div class="row">
    <div class="col-md-12">
        <label for="userdefinedtypes">User Defined Types:</label>
        <table class="table" id="userdefinedtypes">
            <thead>
            <tr><th>Category</th><th>Identifier</th><th>Fields</th><th></th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>



@section Scripts {
    <script>
        var fieldsToAdd = [];
        var udts = [];
        var mappings = [];

        $(function () {
            
            $(window).bind('beforeunload', function (event) {
                var flag = false;
                $.each($('input[type=text]'), function (i, d) {
                    if ($(d).val() != '')
                        flag = true;
                });
                if (fieldsToAdd.length > 0)
                    flag = true;

                if (flag) {
                    return "There is unsaved data on this page.  If you were editing a type and leave now the type will be lost.";
                }
            });

            
            //$(document).keyup(function () { InputValidation() });
            

            $(window).on("hubConnected", function (event) {
                GetData();
            });
            
            $('#addnewfield').on('click', function (event) {
                if ($('#fieldidentifier').val() != '') {
                    var flag = false;
                    $.each(fieldsToAdd, function (i, d) {
                        if (d.Identifier.toLowerCase() == $('#fieldidentifier').val().toLowerCase())
                            flag = true;
                    });
                    if (!flag) {
                        var vals = $('#types').val().split('~');
                        fieldsToAdd.push({ 'Type': { 'Category': vals[0], 'Identifier': vals[1], 'IsArray': vals[2], 'IsUserDefined': vals[3] }, 'Identifier': $('#fieldidentifier').val() });

                    } else
                        alert("Please use a unique Field Identifier!");

                    UpdateFieldList();
                    $('#fieldidentifier').val("");
                   
                }else
                    FieldValidation();
            });
            
            $('#addnewtype').on('click', function (event) {
                var flag = false;
                $.each(udts, function (i, d) {
                    if (d.Category.toLowerCase() == $('#namespace').val().toLowerCase() && d.Identifier.toLowerCase() == $('#identifier').val().toLowerCase())
                        flag = true;
                });
                if (flag)
                    alert("Please use a unique Namespace and/or Type Identifier!");

                if ($('#namespace').val() != '' && $('#identifier').val() != '' && fieldsToAdd.length != 0 && !flag) {
                    var newType = { 'Category': $('#namespace').val(), 'Identifier': $('#identifier').val(), 'Fields': [] };
                    $.each(fieldsToAdd, function (i, d) {
                        newType.Fields.push(d);
                    });
                    dataHub.addUDT(newType).done(function () {
                        GetData();

                    });

                }
                TypeValidation();
            });
        });
    
        
        // Function that will get and show data
        function GetData() {
            udts = [];
            mappings = [];
            fieldsToAdd = [];
            $('#namespace').val("");
            $('#identifier').val("");
            $('#userdefinedtypes tbody').empty();
            $('#fields').empty();
            $('#fieldidentifier').val("");
            $('#types').empty();
            dataHub.getDefinedTypes().done(function (data) {
                //console.log(data);
                $.each(data, function (i, d) {
                    $('#types').append($('<option />').val(d.Category + '~' + d.Identifier + '~' + d.IsArray + '~' + d.IsUserDefined).text(d.Category + ' ' + d.Identifier));
                    if (d.IsUserDefined) {
                        var fieldsString = "";
                        for (var j = 0; j < d.Fields.length; ++j) {
                            fieldsString += d.Fields[j].Type["Category"] + ' ' + d.Fields[j].Type["Identifier"] + ' ' + d.Fields[j].Identifier;
                            if (j < d.Fields.length - 1)
                                fieldsString += ', ';
                        }
                        udts.push({ 'Category': d.Category, 'Identifier': d.Identifier });
                        $('#userdefinedtypes tbody').append($('<tr><td>' + d.Category + '</td><td>' + d.Identifier + '</td><td>' + fieldsString + '</td><td><button id="updatebtn' + i + '"class="btn btn-link"><span class="glyphicon glyphicon-pencil"></span></button><button id="btn' + i + '"class="btn btn-link"><span class="glyphicon glyphicon-remove-sign"></span></button></td></tr>'));
                        $('#btn' + i).on('click', function (e) {
                            RemoveItem(d);
                        });
                        $('#updatebtn' + i).on('click', function (e) {
                            UpdateItem(d);
                        });
                    }
                });
                dataHub.getDefinedMappings().done(function (data) {
                    $.each(data, function (i, d) {
                        mappings.push(d);
                    });
                });
            });

        }

        // Function that repopulates field list
        function UpdateFieldList() {
            $('#fields').empty();
            $.each(fieldsToAdd, function (i, data) {
                $('#fields').append($('<li class="list-group-item"><button class="btn btn-link" onclick="RemoveListItem('+ i+')"><span class="glyphicon glyphicon-remove-sign"></span></button>' +data.Type.Category+ ' ' + data.Type.Identifier + ' ' + data.Identifier + '</li>'));
            });
        }

        // Function called when a remove button is pressed in the field list
        function RemoveListItem(index) {
            fieldsToAdd.splice(index, 1);
            UpdateFieldList();
        }
        
        // Function called when a remove button is pressed in the User Defined Types list
        function RemoveItem(data) {
            for (var i = 0; i < mappings.length; ++i) {
                if (data.Category.toLowerCase() == mappings[i].Type.Category.toLowerCase() && data.Identifier.toLowerCase() == mappings[i].Type.Identifier.toLowerCase()) {
                    var mapflag = confirm(data.Category + " " + data.Identifier + " is tied to the "+ mappings[i].Identifier+ " mapping.  To continue you must delete the mapping first.  Click OK to delete mapping.");
                    if (mapflag) {
                        dataHub.removeMapping(mappings[i]);
                    } else
                        return;
                }
            }
            
            var flag = confirm("You are about to remove a defined data type!")
            if (flag) {
                  for(var i = 0; i < udts.length; ++i) {
                    if (udts[i].Category == data.Category && udts[i].Identifier == data.Identifier)
                        udts.splice(i, 1);
                }

                dataHub.removeUDT(data).done(function () {
                    GetData();
                });

            }
        }

        // Function called when an update button is pressed in the User Defined Types list
        function UpdateItem(data) {
            for (var i = 0; i < mappings.length; ++i) {
                if (data.Category.toLowerCase() == mappings[i].Type.Category.toLowerCase() && data.Identifier.toLowerCase() == mappings[i].Type.Identifier.toLowerCase()) {
                    var mapflag = confirm(data.Category + " " + data.Identifier + " is tied to the " + mappings[i].Identifier + " mapping.  To continue you must delete the mapping first.  Click OK to delete mapping.");
                    if (mapflag) {
                        dataHub.removeMapping(mappings[i]);
                    } else
                        return;
                }
            }

            for (var i = 0; i < udts.length; ++i) {
                if (udts[i].Category == data.Category && udts[i].Identifier == data.Identifier)
                    udts.splice(i, 1);
            }

            fieldsToAdd = [];
            $.each(data.Fields, function (i, d) {
                fieldsToAdd.push(d);
            });
            UpdateFieldList();
            $('#namespace').val(data.Category);
            $('#identifier').val(data.Identifier);
            dataHub.removeUDT(data);
        }
        
        // Functions that validates that the input fields have text
        function TypeValidation() {
            var alerts = 0;
            $.each($('#typeident input[type=text]'), function (i, d) {
                if ($(d).val() == '') {
                    $(d).css('border-color', 'red');
                    ++alerts;
                }
                else
                    $(d).css('border-color', '');
            });
            
            if(fieldsToAdd.length == 0){
                $('#fieldwell').css('border-color', 'red');
                ++alerts;
            }
            else
                $('#fieldwell').css('border-color', '');
            
            if (alerts > 0)
                alert("Missing data, Please enter data in the highlighted fields before proceeding!");
        }
        
        function FieldValidation() {
            var alerts = 0;
            if ($('#fieldidentifier').val() == '') {
                $('#fieldidentifier').css('border-color', 'red');
                ++alerts;
            }else
                $('#fieldidentifier').css('border-color', '');

            if (alerts > 0)
                alert("Missing data, Please enter a field name before trying to add a field!");
        }

    </script>
}

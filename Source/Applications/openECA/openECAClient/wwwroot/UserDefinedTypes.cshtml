@*******************************************************************************************************
//  UserDefinedTypes.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Manage Data Structures";
}
@section StyleSheets {
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}

<div ng-app="UserDefinedStructures">
    <div ng-controller="StructuresCtrl">
        <p id="filelocation">File Location: </p>

        <div class="input-group">
            <input class="form-control" ng-model="searchText" placeholder="Search" type="search" ng-change="search()"/> <span class="input-group-addon">
                <span class="glyphicon glyphicon-search"></span>
            </span>
        </div>

        <table class="table">
            <thead>
            <tr>
                <th class="EmpId" style="width: 10%">
                    <a href="#" ng-click="sort('Category')">
                        Category
                        <span class="{{Header[0]}}"></span>
                    </a>

                </th>
                <th class="name" style="width: 25%">
                    <a ng-click="sort('Identifier')" href="#">
                        Identifier
                        <span class="{{Header[1]}}"></span>
                    </a>
                </th>
                <th class="Email" style="width: 60%">
                    <a ng-click="sort('Fields')" href="#">
                        Fields
                        <span class="{{Header[2]}}"></span>
                    </a>
                </th>
                <th class="pull-right" style="width: 6%">
                </th>
            </tr>
            </thead>
            <tbody>
            <tr ng-repeat="item in pagedStructures[currentPage - 1]">
                <td>{{item.Category}}</td>
                <td>{{item.Identifier}}</td>
                <td>{{getExpressions(item)}}</td>
                <td><button id="updatebtn{{$index}}" class="btn btn-link" style="padding: 0;" ng-click="updateItem(item)"><span class="glyphicon glyphicon-pencil"></span></button><button id="btn{{$index}}" class="btn btn-link" style="padding: 5px;" ng-click="removeItem(item)"><span class="glyphicon glyphicon-remove-sign"></span></button></td>
            </tr>
            </tbody>
        </table>

        <div class="pull-left">
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="firstPage()"><span class="glyphicon glyphicon-backward"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="minusPage()"><span class="glyphicon glyphicon-triangle-left"></span></button>
            </div>
            <input type="number" class="content input-sm" style="padding: 0 0 0 5px; width: 55px" ng-model="currentPage">
            <em class="validationMessage small" style="display: none;"></em>
            &nbsp;of&nbsp;
            <span ng-bind="pageCount"></span>
            &nbsp;
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="plusPage()"><span class="glyphicon glyphicon-triangle-right"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="lastPage()"><span class="glyphicon glyphicon-forward"></span></button>
            </div>
        </div>

        <button type="button" class="btn btn-primary pull-right" data-toggle="modal" ng-click="addNew()">Add Structure</button>

        <div class="pull-right">
            Rows:
            <div class="btn-group">
                <button ng-class="{active: pageSize == 10}" class="btn btn-default" ng-click="setPageSize(10)">10</button>
                <button ng-class="{active: pageSize == 25}" class="btn btn-default" ng-click="setPageSize(25)">25</button>
                <button ng-class="{active: pageSize == 50}" class="btn btn-default" ng-click="setPageSize(50)">50</button>
                <button ng-class="{active: pageSize == 100}" class="btn btn-default" ng-click="setPageSize(100)">100</button>
            </div>
        </div>


        <!-- Modal -->
        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Add New/ Edit Defined Type  - {{udt.Category + ' ' + udt.Identifier}}</h4>
                    </div>
                    <div class="modal-body">
                        <div id="typeident" class="row">
                            <div class="col-md-4">
                                <label for="namespace">Namespace:</label>
                                <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="namespace" ng-model="udt.Category">
                            </div>
                            <div class="col-md-4">
                                <label for="identifier">Type Identifier:</label>
                                <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="identifier" ng-model="udt.Identifier">
                            </div>
                        </div>

                        <div class="row">
                            <form name="fieldForm">
                                <div class="col-md-3">
                                    <label for="types">Types:</label>
                                    <select class="form-control" id="types" ng-model="field.Type" required="required">
                                        <option ng-repeat="x in type" value="{{x}}">{{(x.IsUserDefined ? x.Category + ' ' : '') + x.Identifier}}</option>
                                    </select>
                                </div>
                                <div class="col-md-1">
                                    <div class="checkbox" style="padding-top: 20px; margin-left: -10px">
                                        <label><input type="checkbox" class="checkbox " id="isarray" ng-model="field.IsArray"/>Array</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <label for="fieldidentifier">Field Identifier:</label>
                                    <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="fieldidentifier" required="required" ng-model="field.Identifier"/>
                                </div>
                                <div class="col-md-1">
                                    <br/>
                                    <button class="btn btn-primary" type="button" id="addnewfield" ng-click="addNewField()" ng-disabled="fieldForm.$invalid || validateFields(field.Identifier)">Add Field</button>
                                </div>
                            </form>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <label for="fields">Fields:</label>
                                <div class="well" id="fieldwell">
                                    <ul class="list-group" id="fields">
                                        <li class="list-group-item" ng-repeat="x in udt.Fields"><button class="btn btn-link" ng-click="removeListItem(x)"><span class="glyphicon glyphicon-remove-sign"></span></button>{{x.Type.Category+ ' ' + x.Type.Identifier + ' ' + x.Identifier }}</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <input class="btn btn-primary" type="button" id="addnewtype" data-dismiss="modal" ng-click="addType()" ng-disabled="validateTypes() || udt.Category.length == 0 || udt.Identifier.length == 0" value="Save" hub-dependent/>
                        <input class="btn btn-primary" type="button" id="updatetype" data-dismiss="modal" ng-click="updateType()" ng-disabled="udt.Category.length == 0 || udt.Identifier.length == 0" value="Update" hub-dependent/>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>

            </div>
        </div>

    </div>



</div>

<div id="errors">
    <div id="modal-errors" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">
        <div class="modal-vertical-align-container">
            <div class="modal-dialog modal-vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <a class="close" data-dismiss="modal">×</a>
                        <h4>Errors</h4>
                    </div>
                    <div class="modal-body" style="max-height: 500px; overflow-y: auto"></div>
                    <div class="modal-footer">
                        <input type="button" id="save-errors" class="btn" value="Save" />
                        <input type="button" class="btn" value="Close" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        "use strict";

        var fieldsToAdd = [];
        var udts = [];
        var affectedUDTs = [];
        var updateArray = [];
        var errorList = [];
        var re = /^[A-Za-z_][A-Za-z_0-9]*$/;

        $(function () {
            $(window).on("hubConnected", function (event) {
                dataHub.getUDTFileDirectory().done(function (directory) {
                    $('#filelocation').append(directory);
                });
            });
        });
        
        var userDefinedStructures = angular.module('UserDefinedStructures', []);
        var StructuresCtrl = userDefinedStructures.controller('StructuresCtrl', function ($scope) {
            $scope.rawData;
            $scope.sortBy = 'Type';
            $scope.reverse = false;
            $scope.sortDirection = true;  // true for ascending and false for descending
            $scope.Header = ['glyphicon glyphicon-chevron-up', '', '', '', '', ''];
            $scope.searchText = '';
            $scope.pageSize = 10;
            $scope.currentPage = 1;
            $scope.pageCount;
            $scope.pagedStructures = [];
            $scope.type;
            $scope.udt = {
                Category: '@Model.Global.CompanyAcronym',
                Identifier: '',
                Fields: []
            }
            $scope.oldUdt = $scope.udt;
            $scope.field = {
                IsArray: false,
                Identifier: '',
                Type: null
            }

            $(window).on("hubConnected", function (event) {
                $scope.getData();
                $scope.getCompilerErrors();
            });
            
            $scope.getData = function () {
                dataHub.getDefinedTypes().done(function (data) {              
                    $scope.type = data;
                    $scope.rawData = $.grep(data, function (d) { if (d.IsUserDefined) return d; });
                    $scope.pageCount = Math.ceil(data.length / $scope.pageSize);
                    $scope.setPages($scope.rawData);
                    $scope.$apply();
                    $('#recordCount').text(data.length);
                });
            }
            
            $scope.getCompilerErrors = function () {
                dataHub.getUDTCompilerErrors().done(function (data) {
                    errorList = data;

                    if (errorList.length == 0) {
                        if ($('#error-count').length)
                            hideErrorMessage();

                        $('#modal-errors').modal('hide');
                    } else if (errorList.length > 0) {
                        var anchor = $('<a href="#" id="error-count">');

                        if (data.length == 1)
                            anchor.append('1 error');
                        else
                            anchor.append(data.length + ' errors');

                        UpdateErrorModal();
                        showErrorMessage(anchor.prop('outerHTML') + ' occurred during data structure compilation.');

                        $('#error-count').click(function (e) {
                            $('#modal-errors').modal('show');
                            return false;
                        });
                    }
                }).fail(function (error) {
                    showErrorMessage(error);
                });

            }

            $scope.getExpressions = function (item) {
                if (!item.IsUserDefined) return;

                var fieldsString = "";

                for (var j = 0; j < item.Fields.length; ++j) {
                    fieldsString += (item.Fields[j].Type["IsUserDefined"] ? item.Fields[j].Type["Category"] + ' ' : '') + ' ' + item.Fields[j].Type["Identifier"] + ' ' + item.Fields[j].Identifier;

                    if (j < item.Fields.length - 1)
                        fieldsString += ', ';
                }

                return fieldsString;
            }

            
            // Remove Types
            $scope.removeItem = function (data) {
                dataHub.getEnumeratedReferenceTypes(data).done(function (dataTypes) {
                    const flag = confirm("You are about to delete " + dataTypes.length + " of your defined types and all defined types and mappings derived from them. Are you sure you want to proceed?");

                    if (!flag)
                        return;

                    dataHub.removeUDT(data).done(function () {
                        $scope.getData();
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });
                });
            }
            
            $scope.removeListItem = function (item) {
                $scope.udt.Fields.splice($scope.udt.Fields.indexOf(item), 1)
            }
            
            // Update Types
            $scope.updateItem = function (item) {
                $scope.udt = {
                    Category: angular.copy(item.Category),
                    Identifier: angular.copy(item.Identifier),
                    Fields: angular.copy(item.Fields)
                }

                $scope.oldUdt = {
                    Category: angular.copy(item.Category),
                    Identifier: angular.copy(item.Identifier),
                    Fields: angular.copy(item.Fields)
                }
                $('#addnewtype').hide();
                $('#updatetype').show();
                $('#myModal').modal('show');
            }

            $scope.updateType = function() {
                dataHub.updateUDT($scope.udt, $scope.oldUdt.Category, $scope.oldUdt.Identifier).done(function () {
                    $scope.getData();
                }).fail(function (error) {
                    showErrorMessage(error);
                });
            }
         
            // Add new Types
            $scope.addNew = function () {
                $scope.udt = {
                    Category: '@Model.Global.CompanyAcronym',
                    Identifier: '',
                    Fields: []
                }
                $('#addnewtype').show();
                $('#updatetype').hide();
                $('#myModal').modal('show');
            }
        
            $scope.addNewField = function () {
                $scope.field.Type = JSON.parse($scope.field.Type);
                $scope.field.Type.IsArray = $scope.field.IsArray;
                $scope.field.Type.Identifier += ($scope.field.Type.IsArray ? "[]" : "")
                $scope.udt.Fields.push(angular.copy($scope.field));
            }
            
            $scope.addType = function () {
                dataHub.addUDT($scope.udt).done(function () {
                    $scope.getData();
                }).fail(function(error) {
                    showErrorMessage(error);
                });

            }

            // Validation Function
            $scope.validateFields = function (data) {
                if ($scope.udt.Fields == undefined) return true;
                return $.grep($scope.udt.Fields, function (d) {
                    return d.Identifier.toLowerCase() == data.toLowerCase();
                }).length > 0;
            }
            
            $scope.validateTypes = function () {
                if ($scope.rawData == undefined) return true;
                return $.grep($scope.rawData, function (d) {
                    return d.Identifier.toLowerCase() == $scope.udt.Identifier.toLowerCase() && d.Category.toLowerCase() == $scope.udt.Category.toLowerCase();
                }).length > 0;
            }
            
            // Paging Functions
            $scope.setPages = function (data) {
                var page = 0;
                $scope.pagedStructures = [];
                $scope.pagedStructures.push([]);
                $.each(data, function (index, data) {
                    if (index !== 0 && index % $scope.pageSize === 0) {
                        $scope.pagedStructures.push([]);
                        page++
                    }
                    $scope.pagedStructures[page].push(data);
                });
                $scope.pageCount = page + 1;
                $scope.currentPage = 1;
            };

            $scope.setPageSize = function (size) {
                $scope.pageSize = size;
                $scope.setPages($scope.rawData);
            };

            $scope.setPage = function (pageNumber) {
                $scope.currentPage = pageNumber;
            };

            $scope.firstPage = function () {
                $scope.currentPage = 1;
            };

            $scope.lastPage = function () {
                $scope.currentPage = $scope.pageCount;
            };

            $scope.plusPage = function () {
                $scope.currentPage++;
            }

            $scope.minusPage = function () {
                $scope.currentPage--;
            }

            $scope.sort = function (sortBy) {
                if (sortBy === $scope.sortBy) {
                    $scope.reverse = !$scope.reverse;
                }
                $scope.sortBy = sortBy;
                $scope.Header = ['', '', ''];

                var iconName;

                if ($scope.reverse)
                    iconName = 'glyphicon glyphicon-chevron-down';
                else
                    iconName = 'glyphicon glyphicon-chevron-up';

                if (sortBy === 'Category') {
                    $scope.Header[0] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if (a.Category < b.Category) return -1;
                            if (a.Category > b.Category) return 1;
                            return 0;
                        }
                        else {
                            if (b.Category < a.Category) return -1;
                            if (b.Category > a.Category) return 1;
                            return 0;
                        }
                    });
                }
                else if (sortBy === 'Identifier') {
                    $scope.Header[1] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if (a.Identifier < b.Identifier) return -1;
                            if (a.Identifier > b.Identifier) return 1;
                            return 0;
                        }
                        else {
                            if (b.Identifier < a.Identifier) return -1;
                            if (b.Identifier > a.Identifier) return 1;
                            return 0;
                        }
                    });
                } else if (sortBy === 'Fields') {
                    $scope.Header[2] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if ($scope.getExpressions(a) < $scope.getExpressions(b)) return -1;
                            if ($scope.getExpressions(a) > $scope.getExpressions(b)) return 1;
                            return 0;
                        }
                        else {
                            if ($scope.getExpressions(b) < $scope.getExpressions(a)) return -1;
                            if ($scope.getExpressions(b) > $scope.getExpressions(a)) return 1;
                            return 0;
                        }

                    });
                }

                $scope.setPages($scope.rawData);

            };

            $scope.search = function () {
                var array;
                if ($scope.searchText !== "") {
                    array = $.grep($scope.rawData, function (a, i) {
                        return a.Category.toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0 || a.Identifier.toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0 || $scope.getExpressions(a).toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0;
                    });
                }
                else {
                    array = $scope.rawData;
                }

                $scope.setPages(array);
            };
        });

        function UpdateErrorModal() {
            var content = $('<pre>');

            $.each(errorList, function (key, error) {
                content.append($('<a id="error-' + key + '" href="#">').text(error.Message));
                content.append('\n');
            });

            $('#modal-errors').find('.modal-body').empty().append(
                $('<div style="max-height: 250px; overflow-y: auto">').append(content),
                $('<div id="input-label-errors">').text('No file being edited'),
                $('<textarea id="input-errors" type="text" cols="80" rows="10">').attr('disabled', 'disabled')
            );

            $.each(errorList, function (key, error) {
                $('#error-' + key).click(function (e) {
                    var filePath = error.FilePath;

                    if (filePath.length > 80)
                        filePath = "..." + filePath.substr(filePath.length - 77, 77);

                    $('#error-' + key).parent().children().css('text-decoration', '');
                    $('#error-' + key).css('text-decoration', 'underline');
                    $('#input-label-errors').text(filePath);
                    $('#input-errors').removeAttr('disabled').val(error.FileContents);

                    $('#save-errors').off('click.errors').on('click.errors', function (e) {
                        var contents = $('#input-errors').val();

                        $('#save-errors')
                            .off('click.Errors')
                            .attr('disabled', 'disabled');

                        $('#input-label-errors').val('No file being edited');
                        $('#input-errors').val('').attr('disabled', 'disabled');

                        dataHub.fixUDT(error.FilePath, contents).done(function () {
                            angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                        }).fail(function (error) {
                            showErrorMessage(error);
                        });
                    }).removeAttr('disabled');

                    return false;
                });
            });
        }
        
    </script>
}

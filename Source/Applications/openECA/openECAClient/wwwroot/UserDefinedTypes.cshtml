@*******************************************************************************************************
//  UserDefinedTypes.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Manage Data Structures";
}
@section StyleSheets {
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}

<div id="typeident" class="row">
    <div class="col-md-2">
        <label for="namespace">Namespace:</label>
        <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="namespace" value="@Model.Global.CompanyAcronym">
    </div>
    <div class="col-md-2">
        <label for="identifier">Type Identifier:</label>
        <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="identifier">
    </div>
</div>

<div class="row">
    <div class="col-md-2">
        <label for="types">Types:</label>
        <select class="form-control" id="types"></select>
    </div>
    <div class="col-md-1">
        <div class="checkbox" style="padding-top: 20px; margin-left: -10px">
            <label><input type="checkbox" class="checkbox " id="isarray" />Array</label>
        </div>
    </div>
    <div class="col-md-2">
        <label for="fieldidentifier">Field Identifier:</label>
        <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="fieldidentifier"/>
    </div>
    <div class="col-md-1">
        <br/>
        <input class="btn btn-primary" type="button" id="addnewfield" value="Add Field"/>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <label for="fields">Fields:</label>
        <div class="well" id="fieldwell">
            <ul class="list-group" id="fields"></ul>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <input class="btn btn-primary" type="button" id="addnewtype" value="Save" hub-dependent/>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <label for="userdefinedtypes">User Defined Types:</label>
        <table class="table" id="userdefinedtypes">
            <thead>
            <tr><th>Category</th><th>Identifier</th><th>Fields</th><th></th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        "use strict";

        var fieldsToAdd = [];
        var udts = [];
        var affectedUDTs = [];
        var updateArray = [];
        var re = /^[A-Za-z_][A-Za-z_0-9]*$/;

        $(function () {
            $('#addnewtype').attr('disabled', 'disabled');
            $('#addnewfield').attr('disabled', 'disabled');

            //$(window).bind('beforeunload', function (event) {
            //    var flag = false;
            //    $.each($('input[type=text]'), function (i, d) {
            //        if ($(d).val() != '')
            //            flag = true;
            //    });
            //    if (fieldsToAdd.length > 0)
            //        flag = true;

            //    if (flag) {
            //        return "There is unsaved data on this page.  If you were editing a type and leave now the changes will be lost.";
            //    }

            //    return undefined;
            //});
            
            //$(document).keyup(function () { InputValidation() });            

            $(window).on("hubConnected", function (event) {
                GetData();
            });
            
            $('#namespace').on('keyup', function (e) {
                if (re.test($('#namespace').val())) {
                    $('#namespace').css('border-color', '');
                    if(re.test($('#identifier').val()) && fieldsToAdd.length > 0)
                        $('#addnewtype').removeAttr('disabled');
                }
                else {
                    $('#namespace').css('border-color', 'red');
                    $('#addnewtype').attr('disabled', 'disabled');
                }
            });
            
            $('#identifier').on('keyup', function (e) {
                if (re.test($('#identifier').val())) {
                    $('#identifier').css('border-color', '');
                    if (re.test($('#namespace').val()) && fieldsToAdd.length > 0)
                        $('#addnewtype').removeAttr('disabled');
                }
                else {
                    $('#identifier').css('border-color', 'red');
                    $('#addnewtype').attr('disabled', 'disabled');
                }
            });

            $('#fieldidentifier').on('keyup', function (e) {
                if (re.test($('#fieldidentifier').val())) {
                    $('#fieldidentifier').css('border-color', '');
                    $('#addnewfield').removeAttr('disabled');
                }
                else {
                    $('#fieldidentifier').css('border-color', 'red');
                    $('#addnewfield').attr('disabled', 'disabled');
                }
            });
            
            $('#addnewfield').on('click', function (event) {
                if ($('#fieldidentifier').val() !== '') {
                    var flag = false;

                    $.each(fieldsToAdd, function (i, field) {
                        if (field.Identifier.toLowerCase() === $('#fieldidentifier').val().toLowerCase())
                            flag = true;
                    });

                    if (!flag) {
                        const vals = $('#types').val().split('~');
                        let isArray = "";
                        if ($('#isarray').is(':checked'))
                            isArray = "[]";
                        fieldsToAdd.push({ 'Type': { 'Category': vals[0], 'Identifier': vals[1] + isArray, 'IsArray': isArray, 'IsUserDefined': vals[3] }, 'Identifier': $('#fieldidentifier').val() });

                    } else {
                        alert("Please use a unique Field Identifier!");
                    }

                    UpdateFieldList();
                    $('#fieldidentifier').val("");
                    $('#addnewfield').attr('disabled', 'disabled');

                    if (re.test($('#identifier').val()) && re.test($('#namespace').val()))
                        $('#addnewtype').removeAttr('disabled');
                } else {
                    FieldValidation();
                }
            });
            
            $('#addnewtype').on('click', function (event) {                
                var flag = false;

                $.each(udts, function (i, dataType) {
                    if (dataType.Category.toLowerCase() === $('#namespace').val().toLowerCase() && dataType.Identifier.toLowerCase() === $('#identifier').val().toLowerCase())
                        flag = true;
                });

                if (flag)
                    alert("Please use a unique Namespace and/or Type Identifier!");
                    
                if ($('#namespace').val() !== '' && $('#identifier').val() !== '' && fieldsToAdd.length !== 0 && !flag) {
                    var newType = { 'Category': $('#namespace').val(), 'Identifier': $('#identifier').val(), 'Fields': [] };

                    $.each(fieldsToAdd, function (i, field) {
                        newType.Fields.push(field);
                    });

                    dataHub.addUDT(newType).done(function () {
                        ZeroFields();
                        GetData();
                    }).fail(function(error) {
                        showErrorMessage(error);
                    });
                }

                TypeValidation();
            });
        });    
        
        // Function that will get and show data
        function GetData() {
            udts = [];

            $('#userdefinedtypes tbody').empty();
            $('#types').empty();

            dataHub.getDefinedTypes().done(function (data) {
                $.each(data, function (i, dataType) {
                    $('#types').append($('<option />').val(dataType.Category + '~' + dataType.Identifier + '~' + dataType.IsArray + '~' + dataType.IsUserDefined).text((dataType.IsUserDefined ? dataType.Category + ' ' : '') + dataType.Identifier));

                    if (dataType.IsUserDefined) {
                        let fieldsString = "";

                        for (let j = 0; j < dataType.Fields.length; ++j) {
                            fieldsString += (dataType.Fields[j].Type["IsUserDefined"] ? dataType.Fields[j].Type["Category"] + ' ' : '') + ' ' + dataType.Fields[j].Type["Identifier"] + ' ' + dataType.Fields[j].Identifier;

                            if (j < dataType.Fields.length - 1)
                                fieldsString += ', ';
                        }

                        udts.push(dataType);

                        $('#userdefinedtypes tbody').append($('<tr><td>' + dataType.Category + '</td><td>' + dataType.Identifier + '</td><td>' + fieldsString + '</td><td><button id="updatebtn' + i + '"class="btn btn-link" hub-dependent><span class="glyphicon glyphicon-pencil"></span></button><button id="btn' + i + '"class="btn btn-link" hub-dependent><span class="glyphicon glyphicon-remove-sign"></span></button></td></tr>'));

                        $('#btn' + i).on('click', function (e) {
                            RemoveItem(dataType);
                        });

                        $('#updatebtn' + i).on('click', function (e) {
                            UpdateItem(dataType);
                        });

                        dataHub.getEnumeratedReferenceTypes(dataType).done(function (objects) {
                            if (objects.length > 1)
                                $('#updatebtn' + i).attr('disabled', 'disabled');
                        }).fail(function (error) {
                            showErrorMessage(error);
                        });
                    }
                });
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }

        // Function that repopulates field list
        function UpdateFieldList() {
            $('#fields').empty();
            $.each(fieldsToAdd, function (i, field) {
                $('#fields').append($('<li class="list-group-item"><button class="btn btn-link" onclick="RemoveListItem('+ i+')"><span class="glyphicon glyphicon-remove-sign"></span></button>' +field.Type.Category+ ' ' + field.Type.Identifier + ' ' + field.Identifier + '</li>'));
            });
        }

        // Function called when a remove button is pressed in the field list
        function RemoveListItem(index) {
            fieldsToAdd.splice(index, 1);
            UpdateFieldList();
        }

        // Function called when a remove button is pressed in the User Defined Types list
        function RemoveItem(data) {
            CheckUDT(data);
        }

        // Function called when an update button is pressed in the User Defined Types list
        function UpdateItem(data) {
            const flag = confirm("To edit this defined type you will have to delete all defined types and mappings derived from it. Are you sure?");

            if (!flag)
                return;

            updateArray = [];
            CheckUDTForUpdate(data);

            fieldsToAdd = [];

            $.each(data.Fields, function (i, field) {
                fieldsToAdd.push(field);
            });

            UpdateFieldList();

            $('#namespace').val(data.Category);
            $('#identifier').val(data.Identifier);
            $('#addnewtype').removeAttr('disabled');
        }
        
        // Functions that validates that the input fields have text
        function TypeValidation() {
            var alerts = 0;

            $.each($('#typeident input[type=text]'), function (i, field) {
                if ($(field).val() === '') {
                    $(field).css('border-color', 'red');
                    ++alerts;
                }
                else {
                    $(field).css('border-color', '');
                }
            });
            
            if (fieldsToAdd.length === 0){
                $('#fieldwell').css('border-color', 'red');
                ++alerts;
            }
            else {
                $('#fieldwell').css('border-color', '');
            }

            if (alerts > 0)
                alert("Missing data: please enter data in the highlighted fields before proceeding...");
        }
        
        function FieldValidation() {
            var alerts = 0;

            if ($('#fieldidentifier').val() === '') {
                $('#fieldidentifier').css('border-color', 'red');
                ++alerts;
            } else {
                $('#fieldidentifier').css('border-color', '');
            }

            if (alerts > 0)
                alert("Missing data: please enter a field name before trying to add a field...");
        }

        function CheckUDT(data) {
            dataHub.getEnumeratedReferenceTypes(data).done(function (dataTypes) {
                const flag = confirm("You are about to delete " + dataTypes.length + " of your defined types and all defined types and mappings derived from them. Are you sure you want to proceed?");

                if (!flag)
                    return;

                const uniqueArray = [];
                dataTypes.reverse();

                for (let i = 0 ; i < dataTypes.length ; ++i) {
                    if (uniqueArray.indexOf(dataTypes[i].Category + ' ' + dataTypes[i].Identifier) === -1)
                        uniqueArray.push(dataTypes[i].Category + ' ' + dataTypes[i].Identifier);
                    else
                        dataTypes.splice(i, 1);
                }
 
                $.each(dataTypes, function(i, dataType) {
                    dataHub.getMappings(dataType).done(function (mappings) {
                        if (mappings.length === 0) {
                            if (i === dataTypes.length - 1)
                                dataHub.removeUDT(dataType).done(function () { GetData(); }).fail(function (error) {
                                    showErrorMessage(error);
                                });
                            else
                                dataHub.removeUDT(dataType).fail(function (error) {
                                    showErrorMessage(error);
                                });
                        }

                        $.each(mappings, function (j, map) {
                            dataHub.removeMapping(map).done(function () {
                                if (i === dataTypes.length - 1)
                                    dataHub.removeUDT(dataType).done(function () { GetData(); }).fail(function (error) {
                                        showErrorMessage(error);
                                    });
                                else
                                    dataHub.removeUDT(dataType).fail(function (error) {
                                        showErrorMessage(error);
                                    });

                            }).fail(function (error) {
                                showErrorMessage(error);
                            });
                        });
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });
                });                
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }

        function CheckUDTForUpdate(data) {
            dataHub.getEnumeratedReferenceTypes(data).done(function (dataTypes) {
                const uniqueArray = [];
                dataTypes.reverse();

                for (let i = 0 ; i < dataTypes.length ; ++i) {
                    if (uniqueArray.indexOf(dataTypes[i].Category + ' ' + dataTypes[i].Identifier) === -1)
                        uniqueArray.push(dataTypes[i].Category + ' ' + dataTypes[i].Identifier);
                    else
                        dataTypes.splice(i, 1);
                }

                $.each(dataTypes, function (i, dataType) {
                    dataHub.getMappings(dataType).done(function (mappings) {
                        if (mappings.length === 0) {
                            if (i === dataTypes.length - 1)
                                dataHub.removeUDT(dataType).done(function () { GetData(); }).fail(function (error) {
                                    showErrorMessage(error);
                                });
                            else
                                dataHub.removeUDT(dataType).fail(function (error) {
                                    showErrorMessage(error);
                                });
                        }
                        $.each(mappings, function (j, mapping) {
                            dataHub.removeMapping(mapping).done(function () {
                                if (i === dataTypes.length - 1)
                                    dataHub.removeUDT(dataType).done(function () { GetData(); }).fail(function (error) {
                                        showErrorMessage(error);
                                    });
                                else
                                    dataHub.removeUDT(dataType).fail(function (error) {
                                        showErrorMessage(error);
                                    });

                            }).fail(function (error) {
                                showErrorMessage(error);
                            });
                        });
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });
                });
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }
        
        function ZeroFields() {
            fieldsToAdd = [];
            $('#identifier').val("");
            $('#fields').empty();
            $('#fieldidentifier').val("");
            $('#addnewtype').attr('disabled', 'disabled');
        }
    </script>
}

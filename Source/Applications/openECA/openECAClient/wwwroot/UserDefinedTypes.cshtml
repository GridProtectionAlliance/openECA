@*******************************************************************************************************
//  UserDefinedTypes.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Manage Data Structures";
}
@section StyleSheets {
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}

<div ng-app="UserDefinedStructures">
    <div ng-controller="StructuresCtrl">
        <p id="filelocation">File Location: </p>

        <div class="input-group">
            <input class="form-control" ng-model="searchText" placeholder="Search" type="search" ng-change="search()" /> <span class="input-group-addon">
                <span class="glyphicon glyphicon-search"></span>
            </span>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th class="EmpId" style="width: 10%">
                        <a href="#" ng-click="sort('Category')">
                            Category
                            <span class="{{Header[0]}}"></span>
                        </a>

                    </th>
                    <th class="name" style="width: 25%">
                        <a ng-click="sort('Identifier')" href="#">
                            Identifier
                            <span class="{{Header[1]}}"></span>
                        </a>
                    </th>
                    <th class="Email" style="width: 60%">
                        <a ng-click="sort('Fields')" href="#">
                            Fields
                            <span class="{{Header[2]}}"></span>
                        </a>
                    </th>
                    <th class="pull-right" style="width: 6%">
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr ng-repeat="item in pagedStructures[currentPage - 1]">
                    <td>{{item.Category}}</td>
                    <td>{{item.Identifier}}</td>
                    <td>{{getExpressions(item)}}</td>
                    <td><button id="updatebtn{{$index}}" class="btn btn-link" style="padding: 0;" ng-click="updateItem(item)"><span class="glyphicon glyphicon-pencil"></span></button><button id="btn{{$index}}" class="btn btn-link" style="padding: 5px;" ng-click="removeItem(item)"><span class="glyphicon glyphicon-remove-sign"></span></button></td>
                </tr>
            </tbody>
        </table>

        <div class="pull-left">
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="firstPage()"><span class="glyphicon glyphicon-backward"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="minusPage()"><span class="glyphicon glyphicon-triangle-left"></span></button>
            </div>
            <input type="number" class="content input-sm" style="padding: 0 0 0 5px; width: 55px" ng-model="currentPage">
            <em class="validationMessage small" style="display: none;"></em>
            &nbsp;of&nbsp;
            <span ng-bind="pageCount"></span>
            &nbsp;
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="plusPage()"><span class="glyphicon glyphicon-triangle-right"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="lastPage()"><span class="glyphicon glyphicon-forward"></span></button>
            </div>
        </div>
        <button type="button" class="btn btn-primary pull-right" data-toggle="modal" data-target="#myModal">Add Structure</button>

        <div class="pull-right">
            Rows:
            <div class="btn-group">
                <button ng-class="{active: pageSize == 10}" class="btn btn-default" ng-click="setPageSize(10)">10</button>
                <button ng-class="{active: pageSize == 25}" class="btn btn-default" ng-click="setPageSize(25)">25</button>
                <button ng-class="{active: pageSize == 50}" class="btn btn-default" ng-click="setPageSize(50)">50</button>
                <button ng-class="{active: pageSize == 100}" class="btn btn-default" ng-click="setPageSize(100)">100</button>
            </div>
        </div>
        <!-- Modal -->
        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Modal Header</h4>
                    </div>
                    <div class="modal-body">
                        <div id="typeident" class="row">
                            <div class="col-md-4">
                                <label for="namespace">Namespace:</label>
                                <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="namespace" value="@Model.Global.CompanyAcronym">
                            </div>
                            <div class="col-md-4">
                                <label for="identifier">Type Identifier:</label>
                                <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="identifier">
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-3">
                                <label for="types">Types:</label>
                                <select class="form-control" id="types">
                                    <option ng-repeat="x in type" value="{{x.Category + '~' + x.Identifier + '~' + x.IsArray + '~' + x.IsUserDefined}}">{{(x.IsUserDefined ? x.Category + ' ' : '') + x.Identifier}}</option>
                                </select>
                            </div>
                            <div class="col-md-1">
                                <div class="checkbox" style="padding-top: 20px; margin-left: -10px">
                                    <label><input type="checkbox" class="checkbox " id="isarray" />Array</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="fieldidentifier">Field Identifier:</label>
                                <input class="form-control" title="Must begin with a letter or an underscore and consist of only letters digits and underscores." type="text" id="fieldidentifier" />
                            </div>
                            <div class="col-md-1">
                                <br />
                                <input class="btn btn-primary" type="button" id="addnewfield" value="Add Field" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <label for="fields">Fields:</label>
                                <div class="well" id="fieldwell">
                                    <ul class="list-group" id="fields"></ul>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <input class="btn btn-primary" type="button" id="addnewtype" data-dismiss="modal" value="Save" hub-dependent />
                        <input class="btn btn-primary" type="button" id="updatetype" data-dismiss="modal" value="Update" hub-dependent />
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>

            </div>
        </div>

    </div>



</div>






<div id="errors">
    <div id="modal-errors" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">
        <div class="modal-vertical-align-container">
            <div class="modal-dialog modal-vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <a class="close" data-dismiss="modal">×</a>
                        <h4>Errors</h4>
                    </div>
                    <div class="modal-body" style="max-height: 500px; overflow-y: auto"></div>
                    <div class="modal-footer">
                        <input type="button" id="save-errors" class="btn" value="Save" />
                        <input type="button" class="btn" value="Close" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        "use strict";

        var fieldsToAdd = [];
        var udts = [];
        var affectedUDTs = [];
        var updateArray = [];
        var errorList = [];
        var re = /^[A-Za-z_][A-Za-z_0-9]*$/;

        $(function () {
            $('#updatetype').hide();

            $('#addnewtype').attr('disabled', 'disabled');
            $('#addnewfield').attr('disabled', 'disabled');     

            $(window).on("hubConnected", function (event) {
                //GetData();
                dataHub.getUDTFileDirectory().done(function (directory) {
                    $('#filelocation').append(directory);
                });
            });
            
            $('#namespace').on('keyup', function (e) {
                if (re.test($('#namespace').val())) {
                    $('#namespace').css('border-color', '');
                    if(re.test($('#identifier').val()) && fieldsToAdd.length > 0)
                        $('#addnewtype').removeAttr('disabled');
                }
                else {
                    $('#namespace').css('border-color', 'red');
                    $('#addnewtype').attr('disabled', 'disabled');
                }
            });
            
            $('#identifier').on('keyup', function (e) {
                if (re.test($('#identifier').val())) {
                    $('#identifier').css('border-color', '');
                    if (re.test($('#namespace').val()) && fieldsToAdd.length > 0)
                        $('#addnewtype').removeAttr('disabled');
                }
                else {
                    $('#identifier').css('border-color', 'red');
                    $('#addnewtype').attr('disabled', 'disabled');
                }
            });

            $('#fieldidentifier').on('keyup', function (e) {
                if (re.test($('#fieldidentifier').val())) {
                    $('#fieldidentifier').css('border-color', '');
                    $('#addnewfield').removeAttr('disabled');
                }
                else {
                    $('#fieldidentifier').css('border-color', 'red');
                    $('#addnewfield').attr('disabled', 'disabled');
                }
            });
            
            $('#addnewfield').on('click', function (event) {
                if ($('#fieldidentifier').val() !== '') {
                    var flag = false;

                    $.each(fieldsToAdd, function (i, field) {
                        if (field.Identifier.toLowerCase() === $('#fieldidentifier').val().toLowerCase())
                            flag = true;
                    });

                    if (!flag) {
                        const vals = $('#types').val().split('~');
                        let isArray = "";
                        if ($('#isarray').is(':checked'))
                            isArray = "[]";
                        fieldsToAdd.push({ 'Type': { 'Category': vals[0], 'Identifier': vals[1] + isArray, 'IsArray': isArray, 'IsUserDefined': vals[3] }, 'Identifier': $('#fieldidentifier').val() });

                    } else {
                        alert("Please use a unique Field Identifier!");
                    }

                    UpdateFieldList();
                    $('#fieldidentifier').val("");
                    $('#addnewfield').attr('disabled', 'disabled');

                    if (re.test($('#identifier').val()) && re.test($('#namespace').val()))
                        $('#addnewtype').removeAttr('disabled');
                } else {
                    FieldValidation();
                }
            });
            
            $('#addnewtype').on('click', function (event) {                
                var flag = false;

                $.each(udts, function (i, dataType) {
                    if (dataType.Category.toLowerCase() === $('#namespace').val().toLowerCase() && dataType.Identifier.toLowerCase() === $('#identifier').val().toLowerCase())
                        flag = true;
                });

                if (flag)
                    alert("Please use a unique Namespace and/or Type Identifier!");
                    
                if ($('#namespace').val() !== '' && $('#identifier').val() !== '' && fieldsToAdd.length !== 0 && !flag) {
                    var newType = { 'Category': $('#namespace').val(), 'Identifier': $('#identifier').val(), 'Fields': [] };

                    $.each(fieldsToAdd, function (i, field) {
                        newType.Fields.push(field);
                    });

                    dataHub.addUDT(newType).done(function () {
                        ZeroFields();
                        angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                    }).fail(function(error) {
                        showErrorMessage(error);
                    });
                }

                TypeValidation();
            });
            
            $('#types').on('change', function (e) {
                if ($('#types').val().split('~')[2] === "true") 
                    $('#isarray').attr('disabled', 'disabled');
                else
                    $('#isarray').removeAttr('disabled');
            });
        });
        
        var userDefinedStructures = angular.module('UserDefinedStructures', []);
        var StructuresCtrl = userDefinedStructures.controller('StructuresCtrl', function ($scope) {
            $scope.rawData;
            $scope.sortBy = 'Type';
            $scope.reverse = false;
            $scope.sortDirection = true;  // true for ascending and false for descending
            $scope.Header = ['glyphicon glyphicon-chevron-up', '', '', '', '', ''];
            $scope.searchText = '';
            $scope.pageSize = 10;
            $scope.currentPage = 1;
            $scope.pageCount;
            $scope.pagedStructures = [];
            $scope.type;

            $(window).on("hubConnected", function (event) {
                $scope.getData();
                
            });
            
            $scope.getData = function () {
                dataHub.getDefinedTypes().done(function (data) {              
                    $scope.type = data;
                    $scope.rawData = $.grep(data, function (d) { if (d.IsUserDefined) return d; });
                    $scope.pageCount = Math.ceil(data.length / $scope.pageSize);
                    $scope.setPages($scope.rawData);
                    $scope.$apply();
                    $('#recordCount').text(data.length);

                });
            }

            $scope.getExpressions = function (item) {
                if (!item.IsUserDefined) return;

                var fieldsString = "";

                for (var j = 0; j < item.Fields.length; ++j) {
                    fieldsString += (item.Fields[j].Type["IsUserDefined"] ? item.Fields[j].Type["Category"] + ' ' : '') + ' ' + item.Fields[j].Type["Identifier"] + ' ' + item.Fields[j].Identifier;

                    if (j < item.Fields.length - 1)
                        fieldsString += ', ';
                }

                return fieldsString;
            }

            $scope.setPages = function (data) {
                var page = 0;
                $scope.pagedStructures = [];
                $scope.pagedStructures.push([]);
                $.each(data, function (index, data) {
                    if (index !== 0 && index % $scope.pageSize === 0) {
                        $scope.pagedStructures.push([]);
                        page++
                    }
                    $scope.pagedStructures[page].push(data);
                });
                $scope.pageCount = page + 1;
                $scope.currentPage = 1;
            };

            $scope.removeItem = function (item) {
                RemoveItem(item);
            }
            $scope.updateItem = function (item) {
                UpdateItem(item);
                $('#myModal').modal('show');
            }

            $scope.setPageSize = function (size) {
                $scope.pageSize = size;
                $scope.setPages($scope.rawData);
            };

            $scope.setPage = function (pageNumber) {
                $scope.currentPage = pageNumber;
            };

            $scope.firstPage = function () {
                $scope.currentPage = 1;
            };

            $scope.lastPage = function () {
                $scope.currentPage = $scope.pageCount;
            };

            $scope.plusPage = function () {
                $scope.currentPage++;
            }
            $scope.minusPage = function () {
                $scope.currentPage--;
            }

            $scope.sort = function (sortBy) {
                if (sortBy === $scope.sortBy) {
                    $scope.reverse = !$scope.reverse;
                }
                $scope.sortBy = sortBy;
                $scope.Header = ['', '', ''];

                var iconName;

                if ($scope.reverse)
                    iconName = 'glyphicon glyphicon-chevron-down';
                else
                    iconName = 'glyphicon glyphicon-chevron-up';

                if (sortBy === 'Category') {
                    $scope.Header[0] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if (a.Category < b.Category) return -1;
                            if (a.Category > b.Category) return 1;
                            return 0;
                        }
                        else {
                            if (b.Category < a.Category) return -1;
                            if (b.Category > a.Category) return 1;
                            return 0;
                        }
                    });
                }
                else if (sortBy === 'Identifier') {
                    $scope.Header[1] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if (a.Identifier < b.Identifier) return -1;
                            if (a.Identifier > b.Identifier) return 1;
                            return 0;
                        }
                        else {
                            if (b.Identifier < a.Identifier) return -1;
                            if (b.Identifier > a.Identifier) return 1;
                            return 0;
                        }
                    });
                } else if (sortBy === 'Fields') {
                    $scope.Header[2] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if ($scope.getExpressions(a) < $scope.getExpressions(b)) return -1;
                            if ($scope.getExpressions(a) > $scope.getExpressions(b)) return 1;
                            return 0;
                        }
                        else {
                            if ($scope.getExpressions(b) < $scope.getExpressions(a)) return -1;
                            if ($scope.getExpressions(b) > $scope.getExpressions(a)) return 1;
                            return 0;
                        }

                    });
                }

                $scope.setPages($scope.rawData);

            };

            $scope.search = function () {
                var array;
                if ($scope.searchText !== "") {
                    array = $.grep($scope.rawData, function (a, i) {
                        return a.Category.toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0 || a.Identifier.toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0 || $scope.getExpressions(a).toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0;
                    });
                }
                else {
                    array = $scope.rawData;
                }

                $scope.setPages(array);
            };



        });

        
        // Function that will get and show data
        function GetData() {
            udts = [];

            $('#userdefinedtypes tbody').empty();
            $('#types').empty();

            dataHub.getDefinedTypes().done(function (data) {
                $.each(data, function (i, dataType) {
                    $('#types').append($('<option />').val(dataType.Category + '~' + dataType.Identifier + '~' + dataType.IsArray + '~' + dataType.IsUserDefined).text((dataType.IsUserDefined ? dataType.Category + ' ' : '') + dataType.Identifier));

                    //if (dataType.IsUserDefined) {
                    //    let fieldsString = "";

                    //    for (let j = 0; j < dataType.Fields.length; ++j) {
                    //        fieldsString += (dataType.Fields[j].Type["IsUserDefined"] ? dataType.Fields[j].Type["Category"] + ' ' : '') + ' ' + dataType.Fields[j].Type["Identifier"] + ' ' + dataType.Fields[j].Identifier;

                    //        if (j < dataType.Fields.length - 1)
                    //            fieldsString += ', ';
                    //    }

                    //    udts.push(dataType);

                    //    $('#userdefinedtypes tbody').append($('<tr><td>' + dataType.Category + '</td><td>' + dataType.Identifier + '</td><td>' + fieldsString + '</td><td><button id="updatebtn' + i + '"class="btn btn-link" hub-dependent><span class="glyphicon glyphicon-pencil"></span></button><button id="btn' + i + '"class="btn btn-link" hub-dependent><span class="glyphicon glyphicon-remove-sign"></span></button></td></tr>'));

                    //    $('#btn' + i).on('click', function (e) {
                    //        RemoveItem(dataType);
                    //    });

                    //    $('#updatebtn' + i).on('click', function (e) {
                    //        UpdateItem(dataType);
                    //    });

                    //    //dataHub.getEnumeratedReferenceTypes(dataType).done(function (objects) {
                    //    //    if (objects.length > 1)
                    //    //        $('#updatebtn' + i).attr('disabled', 'disabled');
                    //    //}).fail(function (error) {
                    //    //    showErrorMessage(error);
                    //    //});
                    //}
                });
            }).fail(function (error) {
                showErrorMessage(error);
            });

            dataHub.getUDTCompilerErrors().done(function (data) {
                errorList = data;

                if (errorList.length == 0) {
                    if ($('#error-count').length)
                        hideErrorMessage();

                    $('#modal-errors').modal('hide');
                } else if (errorList.length > 0) {
                    var anchor = $('<a href="#" id="error-count">');

                    if (data.length == 1)
                        anchor.append('1 error');
                    else
                        anchor.append(data.length + ' errors');

                    UpdateErrorModal();
                    showErrorMessage(anchor.prop('outerHTML') + ' occurred during data structure compilation.');

                    $('#error-count').click(function (e) {
                        $('#modal-errors').modal('show');
                        return false;
                    });
                }
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }

        // Function that repopulates field list
        function UpdateFieldList() {
            $('#fields').empty();
            $.each(fieldsToAdd, function (i, field) {
                $('#fields').append($('<li class="list-group-item"><button class="btn btn-link" onclick="RemoveListItem('+ i+')"><span class="glyphicon glyphicon-remove-sign"></span></button>' +field.Type.Category+ ' ' + field.Type.Identifier + ' ' + field.Identifier + '</li>'));
            });
        }

        // Function called when a remove button is pressed in the field list
        function RemoveListItem(index) {
            fieldsToAdd.splice(index, 1);
            UpdateFieldList();
        }

        // Function called when a remove button is pressed in the User Defined Types list
        function RemoveItem(data) {
            CheckUDT(data);
        }

        // Function called when an update button is pressed in the User Defined Types list
        function UpdateItem(data) {
            $('#updatetype').show();
            $('#updatetype').on('click', function (e) {
                UpdateType(data.Category, data.Identifier);
            });
            $('#addnewtype').hide();
            updateArray = [];
            //CheckUDTForUpdate(data);

            fieldsToAdd = [];

            $.each(data.Fields, function (i, field) {
                fieldsToAdd.push(field);
            });

            UpdateFieldList();

            $('#namespace').val(data.Category);
            $('#identifier').val(data.Identifier);
            $('#addnewtype').removeAttr('disabled');
        }
        
        function UpdateType(oldCat, oldIdent) {
            $('#addnewtype').show();
            $('#updatetype').hide();
            $('#updatetype').off("click");

            var flag = false;

            if ($('#namespace').val() !== '' && $('#identifier').val() !== '' && fieldsToAdd.length !== 0) {
                var newType = { 'Category': $('#namespace').val(), 'Identifier': $('#identifier').val(), 'Fields': [] };

                $.each(fieldsToAdd, function (i, field) {
                    newType.Fields.push(field);
                });

                dataHub.updateUDT(newType, oldCat, oldIdent).done(function () {
                    ZeroFields();
                    angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                }).fail(function (error) {
                    showErrorMessage(error);
                });
            }
        }

        // Functions that validates that the input fields have text
        function TypeValidation() {
            var alerts = 0;

            $.each($('#typeident input[type=text]'), function (i, field) {
                if ($(field).val() === '') {
                    $(field).css('border-color', 'red');
                    ++alerts;
                }
                else {
                    $(field).css('border-color', '');
                }
            });
            
            if (fieldsToAdd.length === 0){
                $('#fieldwell').css('border-color', 'red');
                ++alerts;
            }
            else {
                $('#fieldwell').css('border-color', '');
            }

            if (alerts > 0)
                alert("Missing data: please enter data in the highlighted fields before proceeding...");
        }
        
        function FieldValidation() {
            var alerts = 0;

            if ($('#fieldidentifier').val() === '') {
                $('#fieldidentifier').css('border-color', 'red');
                ++alerts;
            } else {
                $('#fieldidentifier').css('border-color', '');
            }

            if (alerts > 0)
                alert("Missing data: please enter a field name before trying to add a field...");
        }

        function CheckUDT(data) {
            dataHub.getEnumeratedReferenceTypes(data).done(function (dataTypes) {
                const flag = confirm("You are about to delete " + dataTypes.length + " of your defined types and all defined types and mappings derived from them. Are you sure you want to proceed?");

                if (!flag)
                    return;

                const uniqueArray = [];
                dataTypes.reverse();

                for (let i = 0 ; i < dataTypes.length ; ++i) {
                    if (uniqueArray.indexOf(dataTypes[i].Category + ' ' + dataTypes[i].Identifier) === -1)
                        uniqueArray.push(dataTypes[i].Category + ' ' + dataTypes[i].Identifier);
                    else
                        dataTypes.splice(i, 1);
                }
 
                $.each(dataTypes, function(i, dataType) {
                    dataHub.getMappings(dataType).done(function (mappings) {
                        if (mappings.length === 0) {
                            if (i === dataTypes.length - 1)
                                dataHub.removeUDT(dataType).done(function () {
                                    angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                                }).fail(function (error) {
                                    showErrorMessage(error);
                                });
                            else
                                dataHub.removeUDT(dataType).fail(function (error) {
                                    showErrorMessage(error);
                                });
                        }

                        $.each(mappings, function (j, map) {
                            dataHub.removeMapping(map).done(function () {
                                if (i === dataTypes.length - 1)
                                    dataHub.removeUDT(dataType).done(function () {
                                        angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                                    }).fail(function (error) {
                                        showErrorMessage(error);
                                    });
                                else
                                    dataHub.removeUDT(dataType).fail(function (error) {
                                        showErrorMessage(error);
                                    });

                            }).fail(function (error) {
                                showErrorMessage(error);
                            });
                        });
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });
                });                
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }

        function CheckUDTForUpdate(data) {
            dataHub.getEnumeratedReferenceTypes(data).done(function (dataTypes) {
                const uniqueArray = [];
                dataTypes.reverse();

                for (let i = 0 ; i < dataTypes.length ; ++i) {
                    if (uniqueArray.indexOf(dataTypes[i].Category + ' ' + dataTypes[i].Identifier) === -1)
                        uniqueArray.push(dataTypes[i].Category + ' ' + dataTypes[i].Identifier);
                    else
                        dataTypes.splice(i, 1);
                }

                $.each(dataTypes, function (i, dataType) {
                    dataHub.getMappings(dataType).done(function (mappings) {
                        if (mappings.length === 0) {
                            if (i === dataTypes.length - 1)
                                dataHub.removeUDT(dataType).done(function () {
                                    angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                                }).fail(function (error) {
                                    showErrorMessage(error);
                                });
                            else
                                dataHub.removeUDT(dataType).fail(function (error) {
                                    showErrorMessage(error);
                                });
                        }
                        $.each(mappings, function (j, mapping) {
                            dataHub.removeMapping(mapping).done(function () {
                                if (i === dataTypes.length - 1)
                                    dataHub.removeUDT(dataType).done(function () {
                                        angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                                    }).fail(function (error) {
                                        showErrorMessage(error);
                                    });
                                else
                                    dataHub.removeUDT(dataType).fail(function (error) {
                                        showErrorMessage(error);
                                    });

                            }).fail(function (error) {
                                showErrorMessage(error);
                            });
                        });
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });
                });
            }).fail(function (error) {
                showErrorMessage(error);
            });
        }

        function UpdateErrorModal() {
            var content = $('<pre>');

            $.each(errorList, function (key, error) {
                content.append($('<a id="error-' + key + '" href="#">').text(error.Message));
                content.append('\n');
            });

            $('#modal-errors').find('.modal-body').empty().append(
                $('<div style="max-height: 250px; overflow-y: auto">').append(content),
                $('<div id="input-label-errors">').text('No file being edited'),
                $('<textarea id="input-errors" type="text" cols="80" rows="10">').attr('disabled', 'disabled')
            );

            $.each(errorList, function (key, error) {
                $('#error-' + key).click(function (e) {
                    var filePath = error.FilePath;

                    if (filePath.length > 80)
                        filePath = "..." + filePath.substr(filePath.length - 77, 77);

                    $('#error-' + key).parent().children().css('text-decoration', '');
                    $('#error-' + key).css('text-decoration', 'underline');
                    $('#input-label-errors').text(filePath);
                    $('#input-errors').removeAttr('disabled').val(error.FileContents);

                    $('#save-errors').off('click.errors').on('click.errors', function (e) {
                        var contents = $('#input-errors').val();

                        $('#save-errors')
                            .off('click.Errors')
                            .attr('disabled', 'disabled');

                        $('#input-label-errors').val('No file being edited');
                        $('#input-errors').val('').attr('disabled', 'disabled');

                        dataHub.fixUDT(error.FilePath, contents).done(function () {
                            angular.element('[ng-controller=StructuresCtrl]').scope().getData();
                        }).fail(function (error) {
                            showErrorMessage(error);
                        });
                    }).removeAttr('disabled');

                    return false;
                });
            });
        }
        
        function ZeroFields() {
            fieldsToAdd = [];
            $('#identifier').val("");
            $('#fields').empty();
            $('#fieldidentifier').val("");
            $('#addnewtype').attr('disabled', 'disabled');
        }
    </script>
}

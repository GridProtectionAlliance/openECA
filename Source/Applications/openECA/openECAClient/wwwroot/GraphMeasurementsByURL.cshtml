@*******************************************************************************************************
    //  GraphMeasurementsByURL.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json
@using System.Collections.Specialized
@using System.Net.Cache
@using System.Net.Http
@using openECAClient
@using GSF.Data.Model
@using GSF.Web
@using Microsoft.AspNet.SignalR
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    //HttpRequestMessage request = ViewBag.Request;
    //Dictionary<string, string> parameters = request.QueryParameters();

    //string filterStr = parameters["filterStr"];
    Layout = "Layout.cshtml";
    ViewBag.Title = "";
    ViewBag.ShowMenu = false;
    ViewBag.PageHasSidebar = false;
    ViewBag.NoShowCase = true;
}
            <div class="text-center" id="graphwrapper">
                <div class="col-md-9">
                    <div id="placeholder" style="width: 100%; height: 1px"></div>
                </div>
                <div class="col-md-2">
                    <div id="legend" style="border: 1px solid black;"></div>
                </div>
            </div>

@section Scripts {
    <script src="~Scripts/flot/jquery.flot.js"></script>
    <script src="~Scripts/flot/jquery.flot.crosshair.js"></script>
    <script src="~Scripts/flot/jquery.flot.navigate.js"></script>
    <script src="~Scripts/flot/jquery.flot.resize.js"></script>
    <script src="~Scripts/flot/jquery.flot.selection.js"></script>
    <script src="~Scripts/flot/jquery.flot.time.js"></script>
    <script src="~Scripts/flot/jquery.flot.axislabels.js"></script>

    <script>    
        var plot;
        var updateInterval = 250;
        var plotData = [];
        var plotDataTemplate = [];
        var filterStr;

        $(function () {
            
            plot = $.plot("#placeholder", plotData, {
                series: {
                    shadowSize: 0
                },
                yaxes: [{
                    show: true,
                    position: "left",
                    axisLabel: "Frequency"
                },{
                    show: true,
                    position: "left",
                    axisLabel: "Voltage"
                }, {
                    show: true,
                    position: "right",
                    axisLabel: "Current"
                }, {
                    show: true,
                    position: "right",
                    axisLabel: "Angle"
                }
                                   
                ],
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    timezone: "browser"
                },
                legend: {
                    show: true,
                    container: $('#legend'),
                    labelFormatter: function (label, series) {
                                       
                    },
                    noColumns: 1,
                    margin: 5
                }
            });


            filterStr = @Raw("'" + filterStr + "'");
            console.log(filterStr);
            setHeights();
            $(window).resize(function () { setHeights() } );

            $(window).on("hubConnected", function (event) {
                //dataHub.updateFilters(filterStr);
                update();
            
            });
            
                    
        }); 

        function update() {         
                plot.setData([GetData()]);
                plot.setupGrid()
                plot.draw();
                setTimeout(update, updateInterval);
        }
        
        function GetData(){
            //dataHub.getMeasurements().done(function (data) {
            //    $.each(data, function (i, d) {
            //        for (var j in plotData) {
            //            if (plotData[j].label == d.ID) {
            //                plotData[j].data.push([d.Timestamp, d.Value]);
            //            }
            //        }
            //    });

            //    for (var i = 0; i < plotData.length; ++i) {
            //        var num = (plotData[i].data.length - 200);
            //        for (var j = 0; j < num; ++j)
            //            plotData[i].data.shift();
            //    }

            //    var res = [];
                
            //    for(var i = 0;  i  < plotData.length; ++i){
            //        res.push(plotData[i]);
            //    }
                
            //    return res;
            //});
            if (plotData.length > 0)
                plotData = plotData.slice(1);

            // Do a random walk

            while (plotData.length < totalPoints) {

                var prev = plotData.length > 0 ? plotData[plotData.length - 1] : 50,
					y = prev + Math.random() * 10 - 5;

                if (y < 0) {
                    y = 0;
                } else if (y > 100) {
                    y = 100;
                }

                data.push(y);
            }
            
            var res = [];
            for (var i = 0; i < data.length; ++i) {
                res.push([i, data[i]])
            }

            return res;
        

        }
        
        function setHeights() {
            $('#sidebar').css('height', $('body').height());
            $('#graphwrapper').css('height',  $('body').height());
            $('#placeholder').css('height', '500px');


        }
    </script>
}

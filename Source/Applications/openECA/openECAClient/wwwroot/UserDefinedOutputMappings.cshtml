@*******************************************************************************************************
//  UserDefinedTypes.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Manage Data Mappings";
}
@section StyleSheets {
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}

<div ng-app="UserDefinedMappings">
    <div ng-controller="MappingsCtrl">
        <p id="filelocation">File Location: </p>

        <div class="input-group">
            <input class="form-control" ng-model="searchText" placeholder="Search" type="search" ng-change="search()"/> <span class="input-group-addon">
                <span class="glyphicon glyphicon-search"></span>
            </span>
        </div>

        <table class="table">
            <thead>
            <tr >
                <th class="EmpId" style="width: 10%">
                    <a href="#" ng-click="sort('Type')">
                        Type
                        <span class="{{Header[0]}}"></span>
                    </a>

                </th>
                <th class="name" style="width: 25%">
                    <a ng-click="sort('Identifier')" href="#">
                        Identifier
                        <span class="{{Header[1]}}"></span>
                    </a>
                </th>
                <th class="Email" style="width: 60%">
                    <a ng-click="sort('Mappings')" href="#">
                        Mappings
                        <span class="{{Header[2]}}"></span>
                    </a>
                </th>
                <th class="pull-right" style="width: 6%">
                </th>
            </tr>
            </thead>
            <tbody>
            <tr ng-repeat="item in pagedMappings[currentPage - 1]">
                <td>{{item.Type.Category + ' ' + item.Type.Identifier}}</td>
                <td>{{item.Identifier}}</td>
                <td>{{getExpressions(item)}}</td>
                <td><button id="updatebtn{{$index}}" class="btn btn-link" style="padding: 0;" ng-click="updateMapping(item)"><span class="glyphicon glyphicon-pencil"></span></button><button id="btn{{$index}}" class="btn btn-link" style="padding: 5px;" ng-click="removeMapping(item)"><span class="glyphicon glyphicon-remove-sign"></span></button></td>
            </tr>
            </tbody>
        </table>

        <div class="pull-left">
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="firstPage()"><span class="glyphicon glyphicon-backward"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == 1" ng-click="minusPage()"><span class="glyphicon glyphicon-triangle-left"></span></button>
            </div>
            <input type="number" class="content input-sm" style="padding: 0 0 0 5px; width: 55px" ng-model="currentPage">
            <em class="validationMessage small" style="display: none;"></em>
            &nbsp;of&nbsp;
            <span ng-bind="pageCount"></span>
            &nbsp;
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="plusPage()"><span class="glyphicon glyphicon-triangle-right"></span></button>
                <button type="button" class="btn btn-default" ng-disabled="currentPage == pageCount" ng-click="lastPage()"><span class="glyphicon glyphicon-forward"></span></button>
            </div>
        </div>
        <button type="button" class="btn btn-primary pull-right" data-toggle="modal" data-target="#myModal">Add Mapping</button>

        <div class="pull-right">
            Rows:
            <div class="btn-group">
                <button ng-class="{active: pageSize == 10}" class="btn btn-default" ng-click="setPageSize(10)">10</button>
                <button ng-class="{active: pageSize == 25}" class="btn btn-default" ng-click="setPageSize(25)">25</button>
                <button ng-class="{active: pageSize == 50}" class="btn btn-default" ng-click="setPageSize(50)">50</button>
                <button ng-class="{active: pageSize == 100}" class="btn btn-default" ng-click="setPageSize(100)">100</button>
            </div>
        </div>

        <!-- Modal -->
        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Add/Edit Mapping</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="types">Type:</label>
                                <select class="form-control" id="types">
                                    <option ng-repeat="x in type" value="{{x.Category + '~' + x.Identifier + '~' + x.IsArray + '~' + x.IsUserDefined + '~' + $index}}">{{ x.Category + ' ' + x.Identifier}}</option>
                                </select>

                            </div>
                            <div class="col-md-6">
                                <label for="identifier">Mapping Identifier:</label>
                                <input class="form-control" type="text" id="identifier">
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <ul class="list-group" id="fields"></ul>
                            </div>
                        </div>

                        @*<div class="row">
                            <div class="col-md-12">
                                <input class="btn btn-primary" type="button" id="addnewmapping" value="Save" hub-dependent />
                            </div>
                        </div>*@


                    </div>
                    <div class="modal-footer">
                        <button id="addnewmapping" type="button" class="btn btn-primary" data-dismiss="modal" hub-dependent>Save</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>

            </div>
        </div>


    </div>



</div>


<div id="errors">
    <div id="modal-errors" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">
        <div class="modal-vertical-align-container">
            <div class="modal-dialog  modal-vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <a class="close" data-dismiss="modal">×</a>
                        <h4>Errors</h4>
                    </div>
                    <div class="modal-body" style="max-height: 500px; overflow-y: auto"></div>
                    <div class="modal-footer">
                        <input type="button" id="save-errors" class="btn" value="Save" />
                        <input type="button" class="btn" value="Close" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Do not delete, used to append dynamic modals to-->
<div id="modals"></div>



@section Scripts {
    <script>
        "use strict";

        var udts = [];
        var mappings = [];
        var parentDevice = [];
        var deviceData = [];
        var measurementDetails = [];
        var errorList = [];
        var re = /^[A-Za-z_][A-Za-z_0-9]*$/;

        $(function () {
            $('#addnewmapping').attr('disabled', 'disabled');

            $(window).on("hubConnected", function (event) {
                dataHub.initializeSubscriptions().fail(function (error) {
                    showErrorMessage(error);
                });
                
                dataHub.getMappingFileDirectory().done(function (directory) {
                    $('#filelocation').append(directory);
                });

            });
            
            // Client function called from the dataHub when meta data gets recieved
            dataHubClient.metaDataReceived = function () {
                dataHub.getDeviceDetails().done(function (data) {
                    deviceData = data;

                    deviceData.sort(function (a, b) {
                        if (a.Acronym > b.Acronym) return 1;
                        if (a.Acronym < b.Acronym) return -1;

                        return 0;
                    });

                    if (deviceData.length && measurementDetails.length)
                        $('.btn-select-measurements').prop('disabled', false);
                }).fail(function (error) {
                    showErrorMessage(error);
                });

                dataHub.getMeasurementDetails().done(function (data) {
                    measurementDetails = data;

                    measurementDetails.sort(function (a, b) {
                        if (a.ID > b.ID) return 1;
                        if (a.ID < b.ID) return -1;

                        return 0;
                    });

                    if (deviceData.length && measurementDetails.length)
                        $('.btn-select-measurements').prop('disabled', false);
                }).fail(function (error) {
                    showErrorMessage(error);
                });
            }

            $('#types').on('change', function (e) {
                UpdateTypeMappings();
            });
            
            $('#identifier').on('keyup', function (e) {
                if (re.test($('#identifier').val())) {
                    $('#identifier').css('border-color', '');
                    $('#addnewmapping').removeAttr('disabled');
                } else {
                    $('#identifier').css('border-color', 'red');
                    $('#addnewmapping').attr('disabled', 'disabled');
                }
            });

            $('#addnewmapping').on('click', function (event) {
                if (MappingValidation()) {
                    let i;

                    for (i = 0; i < mappings.length; ++i) {
                        if (mappings[i].Identifier.toLowerCase() === $('#identifier').val().toLowerCase()) {
                            alert("Please use a unique Identifier!");
                            return;
                        }
                    }

                    const vals = $('#types').val().split('~');
                    let index = 0;

                    for (i = 0; i < udts.length; ++i) {
                        if (vals[0] === udts[i].Category && vals[1] === udts[i].Identifier)
                            index = i;
                    }

                    const fieldMappings = [];

                    for (i = 0; i < udts[index].Fields.length; ++i) {
                        var expressions = "";

                        if (udts[index].Fields[i].Type.IsArray) {
                            $.each($('#input' + udts[index].Fields[i].Identifier).val().split(';'), function (j, field) {
                                if(field != '')
                                    expressions += field + ';';
                            });
                        } else {
                            expressions = $('#input' + udts[index].Fields[i].Identifier).val();
                        }
                        
                        var timeWindow = $('#timeWindow' + udts[index].Fields[i].Identifier).val().trim();


                        fieldMappings.push({ 'Field': udts[index].Fields[i], 'Expression': expressions, 'TimeWindowExpression' : timeWindow });
                    }
                    
                    const newMapping = { 'Type': udts[index], 'Identifier': $('#identifier').val(), 'FieldMappings': fieldMappings  };

                    dataHub.addMapping(newMapping).done(function () {
                        angular.element('[ng-controller=MappingsCtrl]').scope().getData();
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });
                }
            });
        });
    
        var userDefinedMappings = angular.module('UserDefinedMappings', []);
        var MappingsCtrl = userDefinedMappings.controller('MappingsCtrl', function ($scope) {
            $scope.rawData;
            $scope.sortBy = 'Type';
            $scope.reverse = false;
            $scope.sortDirection = true;  // true for ascending and false for descending
            $scope.Header = ['glyphicon glyphicon-chevron-up', '', '', '', '', ''];
            $scope.searchText = '';
            $scope.pageSize = 10;
            $scope.currentPage = 1;
            $scope.pageCount;
            $scope.pagedMappings = [];
            $scope.type;

            $(window).on("hubConnected", function (event) {
                $scope.getData();
            });
            
            $scope.getData = function () {
                udts = [];
                dataHub.getDefinedTypes().done(function (types) {
                    $scope.type = udts = $.grep(types, function (d) { return d.IsUserDefined });
                    $scope.$apply();
                    UpdateTypeMappings();

                    dataHub.getDefinedMappings().done(function (data) {
                        $scope.rawData = data;
                        $scope.pageCount = Math.ceil(data.length / $scope.pageSize);
                        $scope.setPages($scope.rawData);
                        $scope.$apply();
                        $('#recordCount').text(data.length);

                    });
                    dataHub.getMappingCompilerErrors().done(function (data) {
                        errorList = data;

                        if (errorList.length == 0) {
                            if ($('#error-count').length)
                                hideErrorMessage();

                            $('#modal-errors').modal('hide');
                        } else if (errorList.length > 0) {
                            var anchor = $('<a href="#" id="error-count">');

                            if (data.length == 1)
                                anchor.append('1 error');
                            else
                                anchor.append(data.length + ' errors');

                            UpdateErrorModal();
                            showErrorMessage(anchor.prop('outerHTML') + ' occurred during mapping compilation.');

                            $('#error-count').click(function (e) {
                                $('#modal-errors').modal('show');
                                return false;
                            });
                        }
                    }).fail(function (error) {
                        showErrorMessage(error);
                    });

                });

            }

            $scope.getExpressions = function (item) {
                var fieldString = "";
                $.each(item.FieldMappings, function (i, fieldMapping) {
                    fieldString += fieldMapping.Field.Identifier + ' to ' + fieldMapping.Expression + (fieldMapping.TimeWindowExpression != null? ' ' + fieldMapping.TimeWindowExpression: '');
                    if (i < item.FieldMappings.length - 1)
                        fieldString += ', ';
                });
                return fieldString;
            }
            
            $scope.setPages = function (data) {
                var page = 0;
                $scope.pagedMappings = [];
                $scope.pagedMappings.push([]);
                $.each(data, function (index, data) {
                    if (index !== 0 && index % $scope.pageSize === 0) {
                        $scope.pagedMappings.push([]);
                        page++
                    }
                    $scope.pagedMappings[page].push(data);
                });
                $scope.pageCount = page + 1;
                $scope.currentPage = 1;
            };
            
            $scope.removeMapping = function (item) {
                RemoveMapping(item);
            }
            $scope.updateMapping = function (item) {
                UpdateMapping(item);
                $('#myModal').modal('show');
            }
            
            $scope.setPageSize = function (size) {
                $scope.pageSize = size;
                $scope.setPages($scope.rawData);
            };
            
            $scope.setPage = function (pageNumber) {
                $scope.currentPage = pageNumber;
            };

            $scope.firstPage = function () {
                $scope.currentPage = 1;
            };

            $scope.lastPage = function () {
                $scope.currentPage = $scope.pageCount;
            };

            $scope.plusPage = function () {
                $scope.currentPage++;
            }
            $scope.minusPage = function () {
                $scope.currentPage--;
            }
        
            $scope.sort = function (sortBy) {
                if (sortBy === $scope.sortBy) {
                    $scope.reverse = !$scope.reverse;
                }
                $scope.sortBy = sortBy;
                $scope.Header = ['', '', ''];
                
                var iconName;

                if ($scope.reverse)
                    iconName = 'glyphicon glyphicon-chevron-down';
                else
                    iconName = 'glyphicon glyphicon-chevron-up';

                if (sortBy === 'Type') {
                    $scope.Header[0] = iconName;
                    $scope.rawData.sort(function (a, b) {
                        if (!$scope.reverse) {
                            if ((a.Type.Category + ' ' + a.Type.Identifier) < (b.Type.Category + ' ' + b.Type.Identifier)) return -1;
                            if ((a.Type.Category + ' ' + a.Type.Identifier) > (b.Type.Category + ' ' + b.Type.Identifier)) return 1;
                            return 0;
                        }
                        else {
                            if ((b.Type.Category + ' ' + b.Type.Identifier) < (a.Type.Category + ' ' + a.Type.Identifier)) return -1;
                            if ((b.Type.Category + ' ' + b.Type.Identifier) > (a.Type.Category + ' ' + a.Type.Identifier)) return 1;
                            return 0;
                        }
                    });
                }
                else if (sortBy === 'Identifier') {
                    $scope.Header[1] = iconName;
                    $scope.rawData.sort(function(a,b){
                        if (!$scope.reverse) {
                            if (a.Identifier < b.Identifier) return -1;
                            if (a.Identifier > b.Identifier) return 1;
                            return 0;
                        }
                        else {
                            if (b.Identifier < a.Identifier) return -1;
                            if (b.Identifier > a.Identifier) return 1;
                            return 0;
                        }
                    });
                } else if (sortBy === 'Mappings') {
                    $scope.Header[2] = iconName;
                    $scope.rawData.sort(function(a,b){
                        if (!$scope.reverse) {
                            if ($scope.getExpressions(a) < $scope.getExpressions(b)) return -1;
                            if ($scope.getExpressions(a) > $scope.getExpressions(b)) return 1;
                            return 0;
                        }
                        else {
                            if ($scope.getExpressions(b) < $scope.getExpressions(a)) return -1;
                            if ($scope.getExpressions(b) > $scope.getExpressions(a)) return 1;
                            return 0;
                        }
                    });
                }
                
                $scope.setPages($scope.rawData);

            };
            
            $scope.search = function () {
                var array;
                if ($scope.searchText !== "") {
                    array = $.grep($scope.rawData, function (a, i) {
                        return (a.Type.Category + ' ' + a.Type.Identifier).toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0 || a.Identifier.toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0 || $scope.getExpressions(a).toLowerCase().indexOf($scope.searchText.toLowerCase()) >= 0;
                    });
                }
                else {
                    array = $scope.rawData;
                }
                
                $scope.setPages(array);
            };

            

        });
        
        function UpdateTypeMappings() {
            $('#modals').children().remove();

            const vals = $('#types').val().split('~');

            for (let i = 0; i < udts.length; ++i) {
                if (vals[0] === udts[i].Category && vals[1] === udts[i].Identifier) {
                    $('#fields').empty();

                    $.each(udts[i].Fields, function (j, field) {
                        if (field.Type.IsArray) {
                            buildTimeWindowModal(field.Identifier);
                            buildRelativeTimeModal(field.Identifier);
                            if (field.Type.UnderlyingType.IsUserDefined) {
                                $('#fields').append($('<li class="list-group-item" style="height: 80px"><div class="col-md-6"><label>' + field.Type.Category + ' ' + field.Type.Identifier + ' ' + field.Identifier + ':</label> '
                                                    + '<div class="input-group"><input class="form-control" id="input' + field.Identifier + '"><div class="input-group-btn"><select id="select' + field.Identifier + '" class="form-control" multiple="multiple"></select></div></div></div><div class="col-md-6"><label><a id="anchor' + field.Identifier + '" class="" href="#" data-toggle="modal" data-target="#mod' + field.Identifier + 'tw">Edit Time Window</a></label><input class="form-control" type="text" id="timeWindow' + field.Identifier + '"/></div></li>'));

                                dataHub.getDefinedMappings().done(function (data) {
                                    $.each(data, function (k, typeMapping) {
                                        if (field.Type.UnderlyingType.Category === typeMapping.Type.Category && field.Type.UnderlyingType.Identifier === typeMapping.Type.Identifier && $('#select' + field.Identifier).children('option' && '[value=' + typeMapping.Identifier + ']').length == 0)
                                            $('#select' + field.Identifier).append($('<option />').val(typeMapping.Identifier).text(typeMapping.Identifier));
                                    });

                                    $('#select' + field.Identifier).multiselect({
                                        buttonClass: 'btn btn-default',
                                        delimiter: ';',
                                        onChange: function (option, checked) {
                                            if (checked) {
                                                if ($('#input' + field.Identifier).val() !== "" && $('#input' + field.Identifier).val()[$('#input' + field.Identifier).val().length - 1] !== ';')
                                                    $('#input' + field.Identifier).val( $('#input' + field.Identifier).val() +';'+ $(option).val() + ';');
                                                else
                                                    $('#input' + field.Identifier).val($('#input' + field.Identifier).val() + $(option).val() + ';');
                                            }
                                            else {
                                                $('#input' + field.Identifier).val($('#input' + field.Identifier).val().replace($(option).val() + ';', ''));
                                            }
                                            
                                            if ($('#input' + field.Identifier).val().split(';').length > 2) {
                                                $('#anchor' + field.Identifier).text("Edit Relative Time");
                                                $('#anchor' + field.Identifier).attr("data-target", "#mod" + field.Identifier + "rt");
                                            }
                                            else {
                                                $('#anchor' + field.Identifier).text("Edit Time Window");
                                                $('#anchor' + field.Identifier).attr("data-target", "#mod" + field.Identifier + "tw");
                                            }


                                        }
                                    });
                                    
                                    if ($('#select' + field.Identifier).val().length > 1) {
                                        $('#anchor' + field.Identifier).text("Edit Relative Time");
                                        $('#anchor' + field.Identifier).attr("data-target", "#mod" + field.Identifier + "rt");
                                    }
                                    else {
                                        $('#anchor' + field.Identifier).text("Edit Time Window");
                                        $('#anchor' + field.Identifier).attr("data-target", "#mod" + field.Identifier + "tw");

                                    }

                                }).fail(function (error) {
                                    showErrorMessage(error);
                                });
                                
                            }
                            else {
                                buildModal(field.Identifier, true);
                                $('#mod' + field.Identifier).one('show.bs.modal', function () { buildDeviceList(field.Identifier); });

                                $('#fields').append($('<li class="list-group-item" style="height: 80px"><div class="col-md-6"><label>' + field.Type.Category + ' ' + field.Type.Identifier + ' ' + field.Identifier + ':</label>'
                                    + '<div class="input-group"><input id="input' + field.Identifier + '" class="form-control" type="text" aria-describedby="addon' + field.Identifier + '"><span class="input-group-btn" id="addon' + field.Identifer + '"><button type="button" id="btn' + field.Identifier + '" class="btn btn-default btn-select-measurements" data-toggle="modal" data-target="#mod' + field.Identifier + '" disabled>Select</button></span></div></div><div class="col-md-6"><label><a id="anchor' + field.Identifier + '" class="" href="#" data-toggle="modal" data-target="#mod' + field.Identifier + 'tw">Edit Time Window</a></label><input class="form-control" type="text" id="timeWindow' + field.Identifier + '"/></div></li>'));
                                
                                $('#save' + field.Identifier).on('click', function () {
                                    var string = "";

                                    $('#devicelistinner' + field.Identifier + ' input[type=checkbox]').each(function () {
                                        if (this.checked)
                                            string += $(this).val() + ';';
                                        $(this).attr('checked', false);
                                    });

                                    $('#input' + field.Identifier).val(string);
                                    
                                    if (string.split(';').length > 1) {
                                        $('#anchor' + field.Identifier).text("Edit Relative Time");
                                        $('#anchor' + field.Identifier).attr("data-target", "#mod" + field.Identifier + "rt");
                                    }
                                    else {
                                        $('#anchor' + field.Identifier).text("Edit Time Window");
                                        $('#anchor' + field.Identifier).attr("data-target", "#mod" + field.Identifier + "tw");
                                    }

                                    $("#mod" + field.Identifier).modal('toggle');
                                });
                            }
                        }
                        else {
                            buildRelativeTimeModal(field.Identifier);
                            if (field.Type.IsUserDefined) {
                                $('#fields').append($('<li class="list-group-item" style="height: 80px"><div class="col-md-6"><label>' + field.Type.Category + ' ' + field.Type.Identifier + ' ' + field.Identifier + ':</label>'
                                    + '<select id="input' + field.Identifier + '" class="form-control"></select></div><div class="col-md-6"><label><a id="anchor' + field.Identifier + '" class="" href="#" data-toggle="modal" data-target="#mod' + field.Identifier + 'rt">Edit Relative Time</a></label><input class="form-control" type="text" id="timeWindow' + field.Identifier + '"/></div></li>'));

                                dataHub.getDefinedMappings().done(function (data) {
                                    $.each(data, function (k, mapping) {
                                        if (field.Type.Category === mapping.Type.Category && field.Type.Identifier === mapping.Type.Identifier)
                                            $('#input' + field.Identifier).append($('<option />').val(mapping.Identifier).text(mapping.Identifier));
                                    });
                                }).fail(function (error) {
                                    showErrorMessage(error);
                                });

                            }
                            else {
                                buildModal(field.Identifier, false);
                                $('#mod' + field.Identifier).one('show.bs.modal', function ()
                                {
                                    buildDeviceList(field.Identifier);

                                    $('#devicelistinner' + field.Identifier + ' input[type=checkbox]').each(function () {
                                        $(this).change(function () {
                                            $('#input' + field.Identifier).val($(this).val());
                                            $("#mod" + field.Identifier).modal('toggle');
                                            $(this).attr('checked', false);
                                        });
                                    });
                                });

                                $('#fields').append($('<li class="list-group-item" style="height: 80px"><div class="col-md-6"><label>' + field.Type.Category + ' ' + field.Type.Identifier + ' ' + field.Identifier + ':</label>'
                                    + '<div class="input-group"><input id="input' + field.Identifier + '" class="form-control" type="text" aria-describedby="addon' + field.Identifier + '"><span class="input-group-btn" id="addon' + field.Identifer + '"><button type="button" id="btn' + field.Identifier + '" class="btn btn-default btn-select-measurements" data-toggle="modal" data-target="#mod' + field.Identifier + '" disabled>Select</button></span></div></div><div class="col-md-6"><label><a id="anchor' + field.Identifier + '" class="" href="#" data-toggle="modal" data-target="#mod' + field.Identifier + 'rt">Edit Relative Time</a></label><input class="form-control" type="text" id="timeWindow' + field.Identifier + '"/></div></li>'));
                            }
                        }
                        //$('#fields').append($('<li class="list-group-item"><label>' + f.Type.Category + ' ' + f.Type.Identifier + ' ' + f.Identifier + ':</label><input id="input' + j + '" class="form-control" type="text"/></li>'));
                    });
                }
            }

            if (deviceData.length && measurementDetails.length)
                $('.btn-select-measurements').prop('disabled', false);
        }

        function RemoveMapping(data) {
            dataHub.removeMapping(data).done(function () {
                angular.element('[ng-controller=MappingsCtrl]').scope().getData();
            }).fail(function (error) {
                showErrorMessage(error);
            });       
        }
        
        function UpdateMapping(data) {
            for (let i = 0; i < mappings.length; ++i) {
                if (mappings[i].Identifier === data.Identifier)
                    mappings.splice(i, 1);
            }

            $('#identifier').val(data.Identifier);
            $('#types option').filter(function () {
                return ($(this).text() === data.Type.Category + ' ' + data.Type.Identifier); //To select Blue
            }).prop('selected', true);

            UpdateTypeMappings();          

            $.each($('#fields li div').children('[id*="input"]'), function (i, d) {
                if (data.FieldMappings[i].Field.Type.IsArray && !data.FieldMappings[i].Field.Type.IsUserDefined) {
                    $(d).val(data.FieldMappings[i].Expression.split(' ')[0]);
                    $.each(data.FieldMappings[i].Expression.split(' ')[0].split(';'), function (_, field) {
                        if(field != '')
                            var option = $('#fields li div').children('[id*=' + data.FieldMappings[i].Field.Identifier + ']' && 'select').append('<option value="' + field + '" selected="selected">' + field + '</option>');
                    });

                }
                else if ($(d).is('select')) {
                    $(d).val(data.FieldMappings[i].Expression);
                }
                else if ($(d).is('input')) {
                    $(d).val(data.FieldMappings[i].Expression);
                }
            });
            
            $.each($('#fields li div').children('[id*="timeWindow"]'), function (i, d) {
                    $(d).val(data.FieldMappings[i].TimeWindowExpression);
            });
            
            $('#addnewmapping').attr('disabled', false);

        }
        
        // Functions that validates that the input fields have text
        function MappingValidation() {
            var alerts = 0;

            $.each($('input[type=text]').filter(function (index, data) { if ($(data).attr('id').indexOf('timeWindow') < 0) return data }), function (i, field) {
                if ($(field).val() === '') {
                    $(field).css('border-color', 'red');
                    ++alerts;
                } else {
                    $(field).css('border-color', '');
                }
            });

            if (alerts > 0) {
                alert("Missing data: please enter data in the highlighted fields before proceeding...");
                return false;
            }

            return true;
        }

        function UpdateErrorModal() {
            var content = $('<pre>');

            $.each(errorList, function (key, error) {
                content.append($('<a id="error-' + key + '" href="#">').text(error.Message));
                content.append('\n');
            });

            $('#modal-errors').find('.modal-body').empty().append(
                $('<div style="max-height: 250px; overflow-y: auto">').append(content),
                $('<div id="input-label-errors">').text('No file being edited'),
                $('<textarea id="input-errors" type="text" cols="80" rows="10">').attr('disabled', 'disabled')
            );

            $.each(errorList, function (key, error) {
                $('#error-' + key).click(function (e) {
                    var filePath = error.FilePath;

                    if (filePath.length > 80)
                        filePath = "..." + filePath.substr(filePath.length - 77, 77);

                    $('#error-' + key).parent().children().css('text-decoration', '');
                    $('#error-' + key).css('text-decoration', 'underline');
                    $('#input-label-errors').text(filePath);
                    $('#input-errors').removeAttr('disabled').val(error.FileContents);

                    $('#save-errors').off('click.errors').on('click.errors', function (e) {
                        var contents = $('#input-errors').val();

                        $('#save-errors')
                            .off('click.Errors')
                            .attr('disabled', 'disabled');

                        $('#input-label-errors').val('No file being edited');
                        $('#input-errors').val('').attr('disabled', 'disabled');

                        dataHub.fixMapping(error.FilePath, contents).done(function () {
                            angular.element('[ng-controller=MappingsCtrl]').scope().getData();
                        }).fail(function (error) {
                            showErrorMessage(error);
                        });
                    }).removeAttr('disabled');

                    return false;
                });
            });
        }
        
        // used to build the device/stream list
        function buildDeviceList(id) {
            $('#devicelistinner' + id).children().remove();

            parentDevice = [];

            $.each(deviceData, function (key, device) {
                if (parentDevice.indexOf(device.ParentAcronym) === -1) {
                    parentDevice.push(device.ParentAcronym);
                    $('#devicelistinner' + id).append('<div class="panel-heading"><button class="btn btn-link btn-sm" style="font-size: x-small;" data-toggle="collapse" data-parent="#devicelist'+id+'" data-target="#dd'+id + device.ParentAcronym + '">' + device.ParentAcronym + '</button><div id="dd' +id+ device.ParentAcronym + '" class="panel-collapse collapse in"><div class="panel-body"><ul class="list-group" id="parent'+id + device.ParentAcronym + '"></ul></div></div></div>');
                }

                const acronym = device.Acronym.replace(/!/g, "-").replace(device.Acronym.split('!')[0] + '-', "");

                if (device.Enabled) {
                    $('#parent'+id + device.ParentAcronym).append('<li class="list-group-item" ><button class="btn btn-link btn-sm" style="font-size: x-small;" title="' + device.Name + '" data-toggle="collapse" data-target="#dd' +id+ acronym + '">' + acronym + '</button><div id="dd' +id+ acronym + '" class="collapse"><table class="table" style="width:15%; font-size: x-small;" id="tb' +id+ acronym + '"  ><th>ID</th><th>Stream</th><th>Signal</th><th>Description</th></table></div></li>');
                }
            });
            
            $.each(measurementDetails, function (key, measurement) {
                var acronym = null;

                if (measurement.DeviceAcronym != null)
                    acronym = measurement.DeviceAcronym.replace(/!/g, "-").replace(measurement.DeviceAcronym.split('!')[0] + '-', "");

                if (measurement.SignalAcronym !== "DIGI" && measurement.SignalAcronym !== "FLAG" && measurement.SignalAcronym !== "QUAL" && measurement.SignalAcronym !== "STAT" && measurement.SignalAcronym !== "ALRM") {
                    let sigref = measurement.SignalReference.replace(/!/g, "-");
                    sigref = sigref.replace(measurement.DeviceAcronym.replace(/!/g, "-") + "-", "");
                    $('#tb' + id+ acronym).append('<tr title="' + measurement.Description + '"><td nowrap><label class="checkbox-inline"><input type="checkbox" id="cb'+id + measurement.ID + '" value="' + measurement.ID +'">' + measurement.ID.split(':')[1] + '</td><td>' + sigref + '</td><td>' + measurement.SignalAcronym + '</td><td>'+measurement.Description+'</td></tr>');
                }
            });
        }
        
        // used to build statistic modals
        function buildModal(acronym, bool) {
            $("#modals").append('<div id="' + acronym + '"></div>');

            let html = '<div id="mod' + acronym + '" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">';
            html += '<div class="modal-vertical-align-container">'
            html += '<div class="modal-dialog modal-vertical-align-center">';
            html += '<div class="modal-content">';
            html += '<div class="modal-header">';
            html += '<a class="close" data-dismiss="modal">×</a>';
            html += '<h4>' + acronym + ' Selection</h4>';
            html += '</div>';
            html += '<div class="modal-body" style="height: 300px; overflow-y: auto" >';
            html += '<div id="devicelist' + acronym + '" class="panel-group"> ';
            html += '<div id="devicelistinner' + acronym + '" class="panel panel-default"></div>';
            html += '</div>';
            html += '</div>';
            html += '<div class="modal-footer">';

            if (bool)
                html += '<span class="btn" id="save' + acronym + '">Save</span>'; // Save button

            html += '<span class="btn" data-dismiss="modal">Close</span>'; // close button
            html += '</div>';  // footer
            html += '</div>';  // modalWindow
            html += '</div>';

            $('#' + acronym).html(html);
            $("#mod" + acronym).modal({ 'show': false });
        }
        
        // used to build time window modals
        function buildTimeWindowModal(acronym) {
            $("#modals").append('<div id="' + acronym + 'tw"></div>');

            let html =  '<div id="mod' + acronym + 'tw" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">';
            html +=     '   <div class="modal-vertical-align-container">'
            html +=     '       <div class="modal-dialog modal-lg  modal-vertical-align-center">';
            html +=     '           <div class="modal-content">';
            html +=     '               <div class="modal-header">';
            html +=     '                   <a class="close" data-dismiss="modal">×</a>';
            html +=     '                   <h4>' + acronym + ' Sliding Window Mapping Editor</h4>';
            html +=     '               </div>';
            html +=     '               <div class="modal-body" style="height: 300px; overflow-y: auto" >';
            html +=     '                  <label>Time Window:</label>'
            html +=     '                  <select class="form-control selectAfterCancel" id="select' + acronym + 'tw">';
            html +=     '                      <option value="99">None</option>';
            html +=     '                      <option value="0">last &lt;Number&gt; &lt;TimeUnit&gt; </option>';
            html +=     '                      <option value="1">last &lt;Number&gt; &lt;TimeUnit&gt; &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html +=     '                      <option value="2">last &lt;Number&gt; points </option>';
            html +=     '                      <option value="3">last &lt;Number&gt; points &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html +=     '                      <option value="4">from &lt;Number&gt; &lt;TimeUnit&gt; ago for &lt;Number&gt; &lt;TimeUnit&gt;</option>';
            //html +=     '                      <option value="5">from &lt;Number&gt; &lt;TimeUnit&gt; ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; &lt;TimeUnit&gt; </option>';
            html +=     '                      <option value="6">from &lt;Number&gt; &lt;TimeUnit&gt; ago for &lt;Number&gt; &lt;TimeUnit&gt; &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            //html +=     '                      <option value="7">from &lt;Number&gt; &lt;TimeUnit&gt; ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; &lt;TimeUnit&gt; &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html +=     '                      <option value="8">from &lt;Number&gt; points ago for &lt;Number&gt; &lt;TimeUnit&gt;</option>';
            //html +=     '                      <option value="9">from &lt;Number&gt; points ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; &lt;TimeUnit&gt; </option>';
            html +=     '                      <option value="10">from &lt;Number&gt; points ago for &lt;Number&gt; &lt;TimeUnit&gt; &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            //html +=     '                      <option value="11">from &lt;Number&gt; points ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; &lt;TimeUnit&gt; &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html +=     '                      <option value="12">from &lt;Number&gt; &lt;TimeUnit&gt; ago for &lt;Number&gt; points</option>';
            //html +=     '                      <option value="13">from &lt;Number&gt; &lt;TimeUnit&gt; ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; points </option>';
            html +=     '                      <option value="14">from &lt;Number&gt; &lt;TimeUnit&gt; ago for &lt;Number&gt; points &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            //html +=     '                      <option value="15">from &lt;Number&gt; &lt;TimeUnit&gt; ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; points &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html +=     '                      <option value="16">from &lt;Number&gt; points ago for &lt;Number&gt; points</option>';
            //html +=     '                      <option value="17">from &lt;Number&gt; points ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; points </option>';
            html +=     '                      <option value="18">from &lt;Number&gt; points ago for &lt;Number&gt; points &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            //html +=     '                      <option value="19">from &lt;Number&gt; points ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt; for &lt;Number&gt; points &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html +=     '                  </select>';
            html +=     '                  <hr/>';
            html +=     '                  <div id="secondMap' + acronym + 'tw" class="deleteAfterCancel"></div>';
            html +=     '                  <hr/>';
            html +=     '                  <label>Mapping Text:</label>';
            html +=     '                  <textarea class="form-control clearAfterCancel" id="textarea'+ acronym +'tw"></textarea>';
            html +=     '               </div>';
            html +=     '               <div class="modal-footer">';
            html +=     '                  <button class="btn btn-primary" data-dismiss="modal" onclick="saveWindow(' + "mod" + acronym + "tw" + ', \''+acronym+'\')">Save</button>'; // save button
            html +=     '                  <span class="btn btn-default" data-dismiss="modal" onclick="clearFields(' + "mod" + acronym + "tw" + ')">Cancel</span>'; // close button
            html +=     '               </div>';
            html +=     '           </div>';
            html +=     '       </div>';  
            html +=     '   </div>';  // modalWindow
            html +=     '</div>';

            $('#' + acronym + 'tw').html(html);
            
            $('#secondMap' + acronym).children().remove();

            $.each($('#select'+acronym+'tw option:selected').text().split(' '), function (index, word) {
                if (index == 0 && word == 'None') {
                    $('#textarea' + acronym + 'tw').text('');
                    return;
                }

                if (word.indexOf('Number') > 0) {
                    $('#secondMap' + acronym).append('<input type="number"></input>');
                }
                else if (word.indexOf('TimeUnit') > 0) {
                    $('#secondMap' + acronym + 'tw').append('<select>' +
                                                        '<option>microseconds</option>' +
                                                        '<option>milliseconds</option>' +
                                                        '<option>seconds</option>' +
                                                        '<option>minutes</option>' +
                                                        '<option>hours</option>' +
                                                        '<option>days</option>' +
                                                    '</select>');
                }
                else {
                    $('#secondMap' + acronym + 'tw').append('<span>'+word+'</span>');
                }
                
                $('#secondMap' + acronym + 'tw').append('<span>&nbsp;</span>');
            });
            
            var string = "";
            $.each($('#secondMap' + acronym + 'tw').children(), function (i, object) {
                if ($(object).is('select'))
                    string += $(object).children(':selected').text();
                else
                    string += $(object).text();
            });
            $('#textarea' + acronym + 'tw').text(string);
            
            $($('#secondMap' + acronym + 'tw').children()).on('keyup change', function (event) {
                var string = "";
                $.each($('#secondMap' + acronym + 'tw').children(), function (i, object) {
                    if ($(object).is('select'))
                        string += $(object).children(':selected').text();
                    else if ($(object).is('input'))
                        string += $(object).val();
                    else
                        string += $(object).text();
                });
                $('#textarea' + acronym + 'tw').text(string);
            });

            $('#select' + acronym + 'tw').on('change', function (event) {
                $('#secondMap' + acronym + 'tw').children().remove();

                $.each($('#select'+acronym+'tw option:selected').text().split(' '), function (index, word) {
                    if (index == 0 && word == 'None') {
                        $('#textarea' + acronym + 'tw').text('');
                        return;
                    }

                    if (word.indexOf('Number') > 0) {
                        $('#secondMap' + acronym + 'tw').append('<input type="number"></input>');
                    }
                    else if (word.indexOf('TimeUnit') > 0) {
                        $('#secondMap' + acronym + 'tw').append('<select>' +
                                                            '<option>microseconds</option>' +
                                                            '<option>milliseconds</option>' +
                                                            '<option>seconds</option>' +
                                                            '<option>minutes</option>' +
                                                            '<option>hours</option>' +
                                                            '<option>days</option>' +
                                                        '</select>');
                    }
                    else {
                        $('#secondMap' + acronym + 'tw').append('<span>' + word + '</span>');
                    }

                    $('#secondMap' + acronym + 'tw').append('<span>&nbsp;</span>');
                });
                
                
                $($('#secondMap' + acronym + 'tw').children()).on('keyup change', function (event) {
                    var string = "";
                    $.each($('#secondMap' + acronym + 'tw').children(), function (i, object) {
                        if ($(object).is('select'))
                            string += $(object).children(':selected').text();
                        else if ($(object).is('input'))
                            string += $(object).val();
                        else
                            string += $(object).text();
                    });
                    $('#textarea' + acronym + 'tw').text(string);
                });

                var string = "";
                $.each($('#secondMap' + acronym + 'tw').children(), function (i, object) {
                    if ($(object).is('select'))
                        string += $(object).children(':selected').text();
                    else
                        string += $(object).text();
                });
                $('#textarea' + acronym + 'tw').text(string);
            });
            $("#mod" + acronym + 'tw').modal({ 'show': false });

        }
        
        // used to build relative time window modals
        function buildRelativeTimeModal(acronym) {
            $("#modals").append('<div id="' + acronym + 'rt"></div>');

            let html = '<div id="mod' + acronym + 'rt" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="confirm-modal" aria-hidden="true">';
            html += '   <div class="modal-vertical-align-container">'
            html += '       <div class="modal-dialog modal-lg  modal-vertical-align-center">';
            html += '           <div class="modal-content">';
            html += '               <div class="modal-header">';
            html += '                   <a class="close" data-dismiss="modal">×</a>';
            html += '                   <h4>' + acronym + ' Sliding Window Mapping Editor</h4>';
            html += '               </div>';
            html += '               <div class="modal-body" style="height: 300px; overflow-y: auto" >';
            html += '                  <label>Relative Time:</label>'
            html += '                  <select class="form-control selectAfterCancel" id="select' + acronym + 'rt">';
            html += '                      <option value="99">None</option>';
            html += '                      <option value="0"> &lt;Number&gt; &lt;TimeUnit&gt; ago </option>';
            html += '                      <option value="1"> &lt;Number&gt; &lt;TimeUnit&gt; ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html += '                      <option value="2"> &lt;Number&gt; points ago</option>';
            html += '                      <option value="3"> &lt;Number&gt; points ago &#64; &lt;Number&gt; per &lt;TimeUnit&gt;</option>';
            html += '                  </select>';
            html += '                  <hr/>';
            html += '                  <div id="secondMap' + acronym + 'rt" class="deleteAfterCancel"></div>';
            html += '                  <hr/>';
            html += '                  <label>Mapping Text:</label>';
            html += '                  <textarea class="form-control clearAfterCancel" id="textarea' + acronym + 'rt"></textarea>';
            html += '               </div>';
            html += '               <div class="modal-footer">';
            html += '                  <button class="btn btn-primary" data-dismiss="modal" onclick="saveWindow(' + "mod" + acronym + "rt" + ', \'' + acronym + '\')">Save</button>'; // save button
            html += '                  <button class="btn btn-default" data-dismiss="modal" onclick="clearFields('+ "mod"+acronym+"rt"+')">Cancel</button>'; // close button
            html += '               </div>';
            html += '           </div>';
            html += '       </div>';
            html += '   </div>';  // modalWindow
            html += '</div>';

            $('#' + acronym + 'rt').html(html);

            $('#secondMap' + acronym).children().remove();

            $.each($('#select' + acronym + 'rt option:selected').text().split(' '), function (index, word) {
                if (index == 0 && word == 'None') {
                    $('#textarea' + acronym + 'rt').text('');
                    return;
                }

                if (word.indexOf('Number') > 0) {
                    $('#secondMap' + acronym + 'rt').append('<input type="number"></input>');
                }
                else if (word.indexOf('TimeUnit') > 0) {
                    $('#secondMap' + acronym + 'rt').append('<select>' +
                                                        '<option>microseconds</option>' +
                                                        '<option>milliseconds</option>' +
                                                        '<option>seconds</option>' +
                                                        '<option>minutes</option>' +
                                                        '<option>hours</option>' +
                                                        '<option>days</option>' +
                                                    '</select>');
                }
                else {
                    $('#secondMap' + acronym + 'rt').append('<span>' + word + '</span>');
                }

                $('#secondMap' + acronym + 'rt').append('<span>&nbsp;</span>');
            });

            var string = "";
            $.each($('#secondMap' + acronym + 'rt').children(), function (i, object) {
                if ($(object).is('select'))
                    string += $(object).children(':selected').text();
                else
                    string += $(object).text();
            });
            $('#textarea' + acronym + 'rt').text(string);

            $($('#secondMap' + acronym + 'rt').children()).on('keyup change', function (event) {
                var string = "";
                $.each($('#secondMap' + acronym + 'rt').children(), function (i, object) {
                    if ($(object).is('select'))
                        string += $(object).children(':selected').text();
                    else if ($(object).is('input'))
                        string += $(object).val();
                    else
                        string += $(object).text();
                });
                $('#textarea' + acronym + 'rt').text(string);
            });

            $('#select' + acronym + 'rt').on('change', function (event) {
                $('#secondMap' + acronym + 'rt').children().remove();

                $.each($('#select' + acronym + 'rt option:selected').text().split(' '), function (index, word) {
                    if (index == 0 && word == 'None') {
                        $('#textarea' + acronym + 'rt').text('');
                        return;
                    }

                    if (word.indexOf('Number') > 0) {
                        $('#secondMap' + acronym + 'rt').append('<input type="number"></input>');
                    }
                    else if (word.indexOf('TimeUnit') > 0) {
                        $('#secondMap' + acronym + 'rt').append('<select>' +
                                                            '<option>microseconds</option>' +
                                                            '<option>milliseconds</option>' +
                                                            '<option>seconds</option>' +
                                                            '<option>minutes</option>' +
                                                            '<option>hours</option>' +
                                                            '<option>days</option>' +
                                                        '</select>');
                    }
                    else {
                        $('#secondMap' + acronym + 'rt').append('<span>' + word + '</span>');
                    }

                    $('#secondMap' + acronym + 'rt').append('<span>&nbsp;</span>');
                });


                $($('#secondMap' + acronym + 'rt').children()).on('keyup change', function (event) {
                    var string = "";
                    $.each($('#secondMap' + acronym + 'rt').children(), function (i, object) {
                        if ($(object).is('select'))
                            string += $(object).children(':selected').text();
                        else if ($(object).is('input'))
                            string += $(object).val();
                        else
                            string += $(object).text();
                    });
                    $('#textarea' + acronym + 'rt').text(string);
                });

                var string = "";
                $.each($('#secondMap' + acronym + 'rt').children(), function (i, object) {
                    if ($(object).is('select'))
                        string += $(object).children(':selected').text();
                    else
                        string += $(object).text();
                });
                $('#textarea' + acronym + 'rt').text(string);
            });
            $("#mod" + acronym + 'rt').modal({ 'show': false });

        }
        
        function clearFields(mod) {
             $(mod).find('.selectAfterCancel').val(99);
             $(mod).find('.clearAfterCancel').text('');
             $(mod).find('.deleteAfterCancel').children().remove();
        };
        
        function saveWindow(mod, acronym) {
            $('#timeWindow' + acronym).val($(mod).find('textarea').text());
        }
    </script>
}

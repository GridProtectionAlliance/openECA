@*******************************************************************************************************
    //  ExportData.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Export Data";

}
@section StyleSheets{
    @Raw(ViewBag.PageStyleSheets.ToString())
}
<div class="col-md-6 col-md-offset-3">

    <div class="row" style="margin-top: 20px">
        <div class="col-md-12">
            <label for="datatype">Data Type:</label>
            <select class="form-control" id="datatype">
                <option value="Structures">Structures</option>
                <option value="Mappings">Mappings</option>
            </select>
        </div>
    </div>

    <div class="row" style="margin-top: 10px">
        <div class="col-md-12">
            <label for="directory">File Directory:</label>
            <div class="input-group">
                <input class="form-control" type="text" id="directory" value="@Raw(Model.Global.DefaultProjectPath)" />
                <span class="input-group-btn">
                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#directoryBrowser" hub-dependent><span class="glyphicon glyphicon-option-horizontal"></span></button>
                </span>
            </div>
        </div>
    </div>

    <div class="row" style="margin-top: 20px">
        <div class="col-md-12">
            <label for="filename">File Name:</label>
            <input class="form-control" type="text" id="filename">
        </div>
    </div>
    <div class="row" style="margin-top: 20px">
        <div class="col-md-12">
            <button class="form-control btn btn-primary" onclick="exportData()" id="export">Export</button>
        </div>
    </div>

    <hr/>
    <br/>
        
    <div class="row">
        <div class="col-md-12">
            <label for="table"></label>
            <table class="table" id="table">
                <thead></thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

</div>

@Include("DirectoryBrowser.cshtml")

@section Scripts {
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        $("#selectFolder").click(function () {
            $("#directory").val(viewModel.currentFolder());
        });

                var fieldsToAdd = [];
                var udts = [];
                var mappings = [];
                var affectedUDTs = [];
                var updateArray = [];
                var re = /^[A-Za-z_][A-Za-z_0-9]*$/;

                $(function () {


                    $(window).on("hubConnected", function (event) {
                        GetData();
                    });
                    
                    $('#datatype').on('change', function (e) {
                        $('#table thead').children().remove();
                        $('#table tbody').children().remove();

                        if ($('#datatype').val() == 'Structures') {
                            $('#table thead').append('<tr><th></th><th>Category</th><th>Identifier</th><th>Fields</th></tr>');
                            BuildDefinedTypes();
                        }
                        else if ($('#datatype').val() == 'Mappings') {
                            $('#table thead').append('<tr><th></th><th>Type</th><th>Identifier</th><th>Mappings</th></tr>');
                            BuildDefinedMappings();
                        }

                    });

                    $('#namespace').on('keyup', function (e) {
                        if (re.test($('#namespace').val())) {
                            $('#namespace').css('border-color', '');
                            if (re.test($('#identifier').val()) && fieldsToAdd.length > 0)
                                $('#addnewtype').removeAttr('disabled');
                        }
                        else {
                            $('#namespace').css('border-color', 'red');
                            $('#addnewtype').attr('disabled', 'disabled');
                        }
                    });

                    $('#identifier').on('keyup', function (e) {
                        if (re.test($('#identifier').val())) {
                            $('#identifier').css('border-color', '');
                            if (re.test($('#namespace').val()) && fieldsToAdd.length > 0)
                                $('#addnewtype').removeAttr('disabled');
                        }
                        else {
                            $('#identifier').css('border-color', 'red');
                            $('#addnewtype').attr('disabled', 'disabled');
                        }
                    });



                    $('#fieldidentifier').on('keyup', function (e) {
                        if (re.test($('#fieldidentifier').val())) {
                            $('#fieldidentifier').css('border-color', '');
                            $('#addnewfield').removeAttr('disabled');
                        }
                        else {
                            $('#fieldidentifier').css('border-color', 'red');
                            $('#addnewfield').attr('disabled', 'disabled');
                        }
                    });

                    $('#addnewfield').on('click', function (event) {
                        if ($('#fieldidentifier').val() != '') {
                            var flag = false;
                            $.each(fieldsToAdd, function (i, d) {
                                if (d.Identifier.toLowerCase() == $('#fieldidentifier').val().toLowerCase())
                                    flag = true;
                            });
                            if (!flag) {
                                var vals = $('#types').val().split('~');
                                var isArray = "";
                                if ($('#isarray').is(':checked'))
                                    isArray = "[]";
                                fieldsToAdd.push({ 'Type': { 'Category': vals[0], 'Identifier': vals[1] + isArray, 'IsArray': isArray, 'IsUserDefined': vals[3] }, 'Identifier': $('#fieldidentifier').val() });

                            } else
                                alert("Please use a unique Field Identifier!");

                            UpdateFieldList();
                            $('#fieldidentifier').val("");
                            $('#addnewfield').attr('disabled', 'disabled');
                            if (re.test($('#identifier').val()) && re.test($('#namespace').val()))
                                $('#addnewtype').removeAttr('disabled');


                        } else
                            FieldValidation();
                    });

                    $('#addnewtype').on('click', function (event) {

                        var flag = false;
                        $.each(udts, function (i, d) {
                            if (d.Category.toLowerCase() == $('#namespace').val().toLowerCase() && d.Identifier.toLowerCase() == $('#identifier').val().toLowerCase())
                                flag = true;
                        });
                        if (flag)
                            alert("Please use a unique Namespace and/or Type Identifier!");

                        if ($('#namespace').val() != '' && $('#identifier').val() != '' && fieldsToAdd.length != 0 && !flag) {
                            var newType = { 'Category': $('#namespace').val(), 'Identifier': $('#identifier').val(), 'Fields': [] };
                            $.each(fieldsToAdd, function (i, d) {
                                newType.Fields.push(d);
                            });
                            dataHub.addUDT(newType).done(function () {
                                //if (updateArray.length > 0) {
                                //}
                                $.each(updateArray, function (i, d) {
                                    console.log(d);

                                });

                                ZeroFields();
                                GetData();
                            });

                        }
                        TypeValidation();
                    });
                });


                // Function that will get and show data
                function GetData() {
                    $('#table thead').children().remove();
                    $('#table tbody').children().remove();
                    
                    udts = [];
                    mappings = [];

                    dataHub.getDefinedTypes().done(function (data) {
                        $.each(data, function (i, d) {
                            udts.push(d);
                        });
                        $(window).trigger('haveUDTS');
                    });
                    
                    dataHub.getDefinedMappings().done(function (data) {
                        $.each(data, function (i, d) {
                            mappings.push(d);
                            $(window).trigger('haveMappings');

                        });

                    });


                    if ($('#datatype').val() == 'Structures') {
                        $('label[for="table"]').text("User Defined Types:");
                        $('#table thead').append('<tr><th></th><th>Category</th><th>Identifier</th><th>Fields</th></tr>');
                        $(window).on('haveUDTS', function () {
                            BuildDefinedTypes();
                        });

                    }
                    else if ($('#datatype').val() == 'Mappings') {
                        $('label[for="table"]').text("User Defined Mappings:");
                        $('#table thead').append('<tr><th></th><th>Type</th><th>Identifier</th><th>Mappings</th></tr>');
                        $(window).on('haveMappings', function () {
                            BuildDefinedMappings();
                        });

                    }

                    


                }
        
                function BuildDefinedTypes() {
                    $.each(udts, function (i, d) {
                        if (d.IsUserDefined) {

                            var fieldsString = "";
                            for (var j = 0; j < d.Fields.length; ++j) {
                                fieldsString += d.Fields[j].Type["Category"] + ' ' + d.Fields[j].Type["Identifier"] + ' ' + d.Fields[j].Identifier;
                                if (j < d.Fields.length - 1)
                                    fieldsString += ', ';
                            }

                            $('#table tbody').append($('<tr><td><input type="checkbox" id="cb'+ i +'" value="'+i+'"></td><td>' + d.Category + '</td><td>' + d.Identifier + '</td><td>' + fieldsString + '</td></tr>'));
                        }
                    });
                }
        
                function BuildDefinedMappings() {
                    $.each(mappings, function (i, d) {
                        var fieldsString = '';
                        mappings.push(d);
                        $.each(d.FieldMappings, function (i, fms) {
                            fieldsString += fms.Field.Identifier + ' to ' + fms.Expression;
                            if (i < d.FieldMappings.length - 1)
                                fieldsString += ', ';
                        });

                        $('#table tbody').append($('<tr><td><input type="checkbox" id="cb' + i + '" value="' + i + '"></td><td style="width=15%;">' + d.Type.Category + ' ' + d.Type.Identifier + '</td><td>' + d.Identifier + '</td><td>' + fieldsString + '</td></tr>'));
                    })

                }
        
                function exportData() {
                    var array = [];
                    var string = $('#directory').val() + '\\' + $('#filename').val() + '.txt';
                    if ($('#datatype').val() == 'Structures') {
                        $.each($('input[type="checkbox"]'), function (i, cb) {
                            if (this.checked) {
                                array.push(udts[$(cb).val()]);
                            }
                            
                        });
                        dataHub.exportUDTs(array, string).done(function () {
                            alert("Exported UDTs to " + string + "!");
                            location.reload();
                        });


                    }
                    else if ($('#datatype').val() == 'Mappings') {
                        $.each($('input[type="checkbox"]'), function (i, cb) {
                            if (this.checked) {
                                array.push(mappings[$(cb).val()]);
                            }

                        });
                        
                        dataHub.exportMappings(array, string).done(function () {
                            alert("Exported Mappings to " + string + "!");
                            location.reload();

                        });

                    }
                    
                    //console.log(array);
                }
        

                // Function that repopulates field list
                function UpdateFieldList() {
                    $('#fields').empty();
                    $.each(fieldsToAdd, function (i, data) {
                        $('#fields').append($('<li class="list-group-item"><button class="btn btn-link" onclick="RemoveListItem(' + i + ')"><span class="glyphicon glyphicon-remove-sign"></span></button>' + data.Type.Category + ' ' + data.Type.Identifier + ' ' + data.Identifier + '</li>'));
                    });
                }

                // Function called when a remove button is pressed in the field list
                function RemoveListItem(index) {
                    fieldsToAdd.splice(index, 1);
                    UpdateFieldList();
                }

                // Function called when a remove button is pressed in the User Defined Types list
                function RemoveItem(data) {
                    CheckUDT(data);

                }

                // Function called when an update button is pressed in the User Defined Types list
                function UpdateItem(data) {
                    var flag = confirm("To edit this defined type you will have to delete all defined types and mappings derived from it. Are you sure??")
                    if (!flag)
                        return;

                    updateArray = [];
                    CheckUDTForUpdate(data);


                    //for (var i = 0; i < udts.length; ++i) {
                    //    if (udts[i].Category == data.Category && udts[i].Identifier == data.Identifier)
                    //        udts.splice(i, 1);
                    //}

                    fieldsToAdd = [];
                    $.each(data.Fields, function (i, d) {
                        fieldsToAdd.push(d);
                    });

                    UpdateFieldList();
                    $('#namespace').val(data.Category);
                    $('#identifier').val(data.Identifier);
                    $('#addnewtype').removeAttr('disabled');

                }

                // Functions that validates that the input fields have text
                function TypeValidation() {
                    var alerts = 0;
                    $.each($('#typeident input[type=text]'), function (i, d) {
                        if ($(d).val() == '') {
                            $(d).css('border-color', 'red');
                            ++alerts;
                        }
                        else
                            $(d).css('border-color', '');
                    });

                    if (fieldsToAdd.length == 0) {
                        $('#fieldwell').css('border-color', 'red');
                        ++alerts;
                    }
                    else
                        $('#fieldwell').css('border-color', '');

                    if (alerts > 0)
                        alert("Missing data, Please enter data in the highlighted fields before proceeding!");
                }

                function FieldValidation() {
                    var alerts = 0;
                    if ($('#fieldidentifier').val() == '') {
                        $('#fieldidentifier').css('border-color', 'red');
                        ++alerts;
                    } else
                        $('#fieldidentifier').css('border-color', '');

                    if (alerts > 0)
                        alert("Missing data, Please enter a field name before trying to add a field!");
                }

                function CheckUDT(data) {
                    dataHub.getEnumeratedReferenceTypes(data).done(function (objects) {
                        var flag = confirm("You are about to delete " + objects.length + " of your defined types and all defined types and mappings derived from them. Are you absolutely sure??")
                        if (!flag)
                            return;

                        //console.log(objects);
                        var uniqueArray = [];
                        objects.reverse();

                        for (var i = 0 ; i < objects.length ; ++i) {
                            if (uniqueArray.indexOf(objects[i].Category + ' ' + objects[i].Identifier) == -1)
                                uniqueArray.push(objects[i].Category + ' ' + objects[i].Identifier);
                            else
                                objects.splice(i, 1);
                        }

                        $.each(objects, function (i, d) {
                            //console.log("Deleting " + d.Identifier)
                            dataHub.getMappings(d).done(function (mappings) {
                                if (mappings.length == 0) {
                                    if (i == objects.length - 1)
                                        dataHub.removeUDT(d).done(function () { GetData(); });
                                    else
                                        dataHub.removeUDT(d);
                                }
                                $.each(mappings, function (j, map) {
                                    dataHub.removeMapping(map).done(function () {
                                        if (i == objects.length - 1)
                                            dataHub.removeUDT(d).done(function () { GetData(); });
                                        else
                                            dataHub.removeUDT(d);

                                    });
                                });
                            });

                        });

                    });

                }

                function CheckUDTForUpdate(data) {
                    dataHub.getEnumeratedReferenceTypes(data).done(function (objects) {
                        //console.log(objects);
                        var uniqueArray = [];
                        objects.reverse();

                        for (var i = 0 ; i < objects.length ; ++i) {
                            if (uniqueArray.indexOf(objects[i].Category + ' ' + objects[i].Identifier) == -1)
                                uniqueArray.push(objects[i].Category + ' ' + objects[i].Identifier);
                            else
                                objects.splice(i, 1);
                        }

                        //for (var i = 0; i < objects.length; ){

                        //}

                        $.each(objects, function (i, d) {
                            //console.log("Deleting " + d.Identifier)
                            dataHub.getMappings(d).done(function (mappings) {
                                if (mappings.length == 0) {
                                    if (i == objects.length - 1)
                                        dataHub.removeUDT(d).done(function () { GetData(); });
                                    else
                                        dataHub.removeUDT(d);
                                }
                                $.each(mappings, function (j, map) {
                                    dataHub.removeMapping(map).done(function () {
                                        if (i == objects.length - 1)
                                            dataHub.removeUDT(d).done(function () { GetData(); });
                                        else
                                            dataHub.removeUDT(d);

                                    });
                                });
                            });

                        });

                    });

                }

                function ZeroFields() {
                    fieldsToAdd = [];
                    $('#identifier').val("");
                    $('#fields').empty();
                    $('#fieldidentifier').val("");
                    $('#addnewtype').attr('disabled', 'disabled');

                }

            
    </script>
}

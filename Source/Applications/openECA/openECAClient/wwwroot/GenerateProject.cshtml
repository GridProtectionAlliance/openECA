@*******************************************************************************************************
//  GenerateProject.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Generate Project";
}
@section StyleSheets {
    <style>
        ul.directoryListing {
            height: 300px;
            overflow-x: scroll;
            overflow-y: auto;
        }
    </style>
}
<div class="row">
    <div class="col-md-3">
        <label for="identifier">Project Name:</label>
        <input class="form-control" type="text" id="identifier">
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <label for="directory">File Directory:</label>
        <div class="input-group">
            <input class="form-control" type="text" id="directory" />
            <span class="input-group-btn">
                <button type="button" id="showSelectFolder" class="btn btn-default" data-toggle="modal" data-target="#directoryBrowser"  hub-dependent><span class="glyphicon glyphicon-option-horizontal"></span></button>
            </span>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <label for="inputs">Input Mapping:</label>
        <select class="form-control" id="inputs"></select>
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <label for="outputs">Output Mapping:</label>
        <select class="form-control" id="outputs"></select>
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <label for="targetLanguage">Target Language:</label>
        <select class="form-control" id="targetLanguage">
            <option value="C#">C# (.NET)</option>
            <option value="F#" disabled="disabled">F# (.NET)</option>
            <option value="VB" disabled="disabled">VB (.NET)</option>
            <option value="Java" disabled="disabled">Java</option>
            <option value="C++" disabled="disabled">C++</option>
            <option value="Python" disabled="disabled">Python</option>
            <option value="MATLAB" disabled="disabled">MATLAB</option>
        </select>
    </div>
</div>

<br/>
<br/>

<div class="row">
    <div class="col-md-12">
        <input class="btn btn-primary" type="button" id="generate" value="Generate Project"/>
    </div>
</div>

<div id="directoryBrowser" class="modal fade" role="dialog">
    <div class="modal-vertical-align-container">
        <div class="modal-dialog modal-md modal-vertical-align-center">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Select Folder</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12">
                            Current Folder: <span data-bind="text: currentFolder"></span>
                            <ul class="directoryListing" data-bind="foreach: folders" size="15">
                                <li data-bind="text: $data"></li>
                            </ul>
                            Folders: <span data-bind="text: recordCount">calculating...</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="input-group">
                                <input type="text" id="selectedFolder" class="form-control" placeholder="Selected folder..." />
                                <span class="input-group-btn">
                                    <button type="button" id="selectFolder" class="btn btn-primary" data-dismiss="modal" hub-dependent>Select</button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
<script src="Scripts/knockout-3.4.0.js"></script>
<script>
    // Define view model for directory browsing
    function DirectoryViewModel() {
        const self = this;

        // Configuration fields
        self.filterText = "";                       // Search filter text

        // Observable fields
        self.folders = ko.observableArray();        // Folders to display

        // Internal fields
        self._currentFolder = ko.observable(".");   // Current folder

        // Gets record count
        self.recordCount = ko.pureComputed({
            read: function () {
                return self.folders().length;
            }
        });

        self.currentFolder = ko.pureComputed({
            read: self._currentFolder,
            write: function (value) {
                self._currentFolder(value);

                if (hubIsConnected) {
                    dataHub.getAbsolutePath(value).done(function (path) {
                        self._currentFolder(path);
                        self.loadFolders(path);
                    });
                }
            }
        });

        self.loadFolders = function (rootFolder) {
            if (!hubIsConnected)
                return;

            dataHub.browseDirectories(rootFolder).done(function (folders) {
                self.folders.removeAll();
                self.folders(folders);
            });
        }
    }

    const viewModel = new DirectoryViewModel();

    var re = /^[A-Za-z_][\w]*$/;
    var relinuxpath = /^(\/[^/ ]*)+\/?$/;
    var rewinpath = /^(?:[\w]\:|\\)(\\[\w\-\s\.]+)+$/;

    $(function () {
        $('#generate').attr('disabled', 'disabled');

        $('#identifier').on('keyup', function (e) {
            if (re.test($('#identifier').val())) {
                $('#identifier').css('border-color', '');
                if (re.test($('#identifier').val()) && (relinuxpath.test($('#directory').val()) || rewinpath.test($('#directory').val())))
                    $('#generate').removeAttr('disabled');
            }
            else {
                $('#identifier').css('border-color', 'red');
                $('#generate').attr('disabled', 'disabled');
            }
        });

        $('#directory').on('keyup', function (e) {
            if (relinuxpath.test($('#directory').val()) || rewinpath.test($('#directory').val())) {
                $('#directory').css('border-color', '');
                if (re.test($('#identifier').val()) && (relinuxpath.test($('#directory').val()) || rewinpath.test($('#directory').val())))
                    $('#generate').removeAttr('disabled');
            }
            else {
                $('#directory').css('border-color', 'red');
                $('#generate').attr('disabled', 'disabled');
            }
        });

        $(window).on("hubConnected", function (event) {
            GetData();
        });

        $('#generate').one('click', function (e) {
            var input, output;
            dataHub.getDefinedMappings().done(function (data) {
                $.each(data, function (i, d) {
                    if (d.Identifier == $('#inputs').val())
                        input = d;
                    else if (d.Identifier == $('#outputs').val())
                        output = d;
                });
                //console.log(input);
                //console.log(output);

                dataHub.createProject($('#identifier').val(), $('#directory').val(), input, output, $('#targetLanguage').val()).done(function () {
                    alert("Project Created!");
                    location.reload();
                });
            });

        });        
    });

    function GetData() {
        dataHub.getDefinedMappings().done(function (data) {
            //console.log(data);
            $.each(data, function (i, d) {
                $('#inputs').append($('<option />').val(d.Identifier).text(d.Identifier));
                $('#outputs').append($('<option />').val(d.Identifier).text(d.Identifier));

            });

        });
    }

    $("#directoryBrowser").on("show.bs.modal", function () {
        ko.applyBindings(viewModel);

        dataHub.getAbsolutePath(".").done(function (path) {
            viewModel.currentFolder(path);
        });        
    });
</script>
}

@*******************************************************************************************************
//  GenerateProject.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openECAClient
@using openECAClient.Model
@using GSF.Web
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Generate Project";
}
@section StyleSheets {
    @Raw(ViewBag.PageStyleSheets.ToString())
}
<div class="col-md-6 col-md-offset-3">
    <div class="row" style="margin-top: 20px">
        <div class="col-md-12">
            <label for="identifier">Project Name:</label>
            <input class="form-control" type="text" id="identifier">
        </div>
    </div>

    <div class="row" style="margin-top: 10px">
        <div class="col-md-12">
            <label for="directory">File Directory:</label>
            <div class="input-group">
                <input class="form-control" type="text" id="directory" value="@Raw(Model.Global.DefaultProjectPath)" />
                <span class="input-group-btn">
                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#directoryBrowser" hub-dependent><span class="glyphicon glyphicon-option-horizontal"></span></button>
                </span>
            </div>
        </div>
    </div>

    <div class="row" style="margin-top: 10px">
        <div class="col-md-12">
            <label for="inputs">Input Mapping:</label>
            <select class="form-control" id="inputs"></select>
        </div>
    </div>

    <div class="row" style="margin-top: 10px">
        <div class="col-md-12">
            <label for="outputs">Output Mapping:</label>
            <select class="form-control" id="outputs"></select>
        </div>
    </div>

    <div class="row" style="margin-top: 10px">
        <div class="col-md-12">
            <label for="targetLanguage">Target Language:</label>
            <select class="form-control" id="targetLanguage">
                <option value="C#">C# (.NET)</option>
                <option value="F#">F# (.NET)</option>
                <option value="VB">Visual Basic (.NET)</option>
                <option value="IronPython">IronPython (.NET)</option>
                <option value="MATLAB">MATLAB</option>
                <option value="Java" disabled="disabled">Java</option>
                <option value="C++" disabled="disabled">C++</option>
                <option value="Python" disabled="disabled">Python</option>
            </select>
        </div>
    </div>

    <br />
    <br />

    <div class="row">
        <div class="col-md-12">
            <input class="btn btn-primary" type="button" id="generate" value="Generate Project" hub-dependent />
        </div>
    </div>
</div>
@Include("DirectoryBrowser.cshtml")
@section Scripts {
    <script src="Scripts/knockout-3.4.0.js"></script>
    @Raw(ViewBag.PageControlScripts.ToString())
    <script>
        $("#selectFolder").click(function () {
            $("#directory").val(directoryViewModel.currentFolder());
        });

        var re = /^[A-Za-z_][\w]*$/;
        var relinuxpath = /^(\/[^/ ]*)+\/?$/;
        var rewinpath = /^(?:[\w]\:|\\)(\\[\w\-\s\.]+)+$/;

        $(function () {
            $("#generate").attr('disabled', 'disabled');

            $('#identifier').on('keyup', function (e) {
                if (re.test($('#identifier').val())) {
                    $('#identifier').css('border-color', '');
                    if (re.test($('#identifier').val()) && (relinuxpath.test($('#directory').val()) || rewinpath.test($('#directory').val())))
                        $('#generate').removeAttr('disabled');
                }
                else {
                    $('#identifier').css('border-color', 'red');
                    $('#generate').attr('disabled', 'disabled');
                }

                $("#directory").val("@Raw(Model.Global.DefaultProjectPath.JavaScriptEncode())" + $("#identifier").val());
            });

            $('#directory').on('keyup', function (e) {
                if (relinuxpath.test($('#directory').val()) || rewinpath.test($('#directory').val())) {
                    $('#directory').css('border-color', '');
                    if (re.test($('#identifier').val()) && (relinuxpath.test($('#directory').val()) || rewinpath.test($('#directory').val())))
                        $('#generate').removeAttr('disabled');
                }
                else {
                    $('#directory').css('border-color', 'red');
                    $('#generate').attr('disabled', 'disabled');
                }
            });

            $(window).on("hubConnected", function (event) {
                GetData();
            });

            $('#generate').one('click', function (e) {
                var input, output;
                dataHub.getDefinedMappings().done(function (data) {
                    $.each(data, function (i, d) {
                        if (d.Identifier == $('#inputs').val())
                            input = d;
                        else if (d.Identifier == $('#outputs').val())
                            output = d;
                    });

                    dataHub.createProject($('#identifier').val(), $('#directory').val(), input, output, $('#targetLanguage').val()).done(function () {
                        alert("Project Created!");
                        location.reload();
                    });
                });

            });
        });

        function GetData() {
            dataHub.getDefinedMappings().done(function (data) {
                //console.log(data);
                $.each(data, function (i, d) {
                    $('#inputs').append($('<option />').val(d.Identifier).text(d.Identifier));
                    $('#outputs').append($('<option />').val(d.Identifier).text(d.Identifier));
                });
            });
        }
    </script>
}

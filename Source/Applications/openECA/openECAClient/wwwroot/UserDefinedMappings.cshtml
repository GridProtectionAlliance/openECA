@*******************************************************************************************************
    //  UserDefinedTypes.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@*@using System
@using System.Collections.Generic
@using System.Data
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using GSF.TimeSeries
@using GSF.TimeSeries.Transport
@using Newtonsoft.Json*@
@using openECAClient
@using openECAClient.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "Manage Data Mappings";

}
@section StyleSheets{
    <style>
        .row {
            margin-top: 10px;
            margin-bottom: 10px;
        }
    </style>
}
<div class="row">
    <div class="col-md-2">
        <label for="types">Type:</label>
        <select class="form-control" id="types"></select>
    </div>
    <div class="col-md-2">
        <label for="identifier">Mapping Identifier:</label>
        <input class="form-control" type="text" id="identifier">
    </div>

</div>

<div class="row">
    <div class="col-md-6">
        <ul class="list-group" id="fields"></ul>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <input class="btn btn-primary" type="button" id="addnewmapping" value="Save"/>
    </div>
</div>


<div class="row">
    <div class="col-md-12">
        <label for="userdefinedmappings">User Defined Mappings:</label>
        <table class="table" id="userdefinedmappings">
            <thead>
            <tr><th>Type</th><th>Identifier</th><th>Mappings</th><th></th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>



@section Scripts {
    <script>
        var udts = [];
        var mappings = [];
        var re = /^[A-Za-z_][A-Za-z_0-9]*$/;
        $(function () {
            $('#addnewmapping').attr('disabled', 'disabled');

            $(window).bind('beforeunload', function (event) {
                var flag = false;
                $.each($('input[type=text]'), function (i, d) {
                    if ($(d).val() != '')
                        flag = true;
                });

                if (flag) {
                    return "There is unsaved data on this page.  If you were editing a mapping and leave now the changes will be lost.";
                }

                return undefined;
            });


            $(window).on("hubConnected", function (event) {
                GetData();
            });
            
            $('#types').on('change', function (e) {
                UpdateTypeMappings();
            });
            
            $('#identifier').on('keyup', function (e) {
                if (re.test($('#identifier').val())) {
                    $('#identifier').css('border-color', '');
                    $('#addnewmapping').removeAttr('disabled');
                }
                else {
                    $('#identifier').css('border-color', 'red');
                    $('#addnewmapping').attr('disabled', 'disabled');
                }
            });


            $('#addnewmapping').on('click', function (event) {
                if (MappingValidation()) {
                    
                    for (var i = 0; i < mappings.length; ++i) {
                        if (mappings[i].Identifier.toLowerCase() == $('#identifier').val().toLowerCase()) {
                            alert("Please use a unique Identifier!");
                            return;
                        }
                    }

                    var vals = $('#types').val().split('~');
                    var index;
                    for (var i = 0; i < udts.length; ++i) {
                        if (vals[0] == udts[i].Category && vals[1] == udts[i].Identifier) {
                            index = i;
                        }
                    }

                    var fieldMappings = [];
                    for (var i = 0; i < udts[index].Fields.length; ++i) {
                        fieldMappings.push({ 'Field': udts[index].Fields[i], 'Expression': $('#input' + i).val() });
                    }
                    var newMapping = { 'Type': udts[index], 'Identifier': $('#identifier').val(), 'FieldMappings': fieldMappings };


                    dataHub.addMapping(newMapping).done(function () {
                        GetData();
                    });

                }
            });
        });
    
        function GetData() {
            udts = [];
            mappings = [];
            $('#identifier').val("");
            $('#types').empty();
            $('#userdefinedmappings tbody').empty();
            dataHub.getDefinedTypes().done(function (data) {
                //console.log(data);
                $.each(data, function (i, d) {
                    if (d.IsUserDefined) {
                        $('#types').append($('<option />').val(d.Category + '~' + d.Identifier + '~' + d.IsArray + '~' + d.IsUserDefined + '~' + i).text(d.Category + ' ' + d.Identifier));
                        udts.push(d);
                    }

                });
                
                UpdateTypeMappings();

                dataHub.getDefinedMappings().done(function (data) {
                    $.each(data, function (i, d) {
                        var fieldsString = '';
                        mappings.push(d);
                        $.each(d.FieldMappings, function (i, fms) {
                            fieldsString += fms.Field.Identifier + ' to ' + fms.Expression;
                            if (i < d.FieldMappings.length - 1)
                                fieldsString += ', ';
                        });
                        $('#userdefinedmappings tbody').append($('<tr><td>' + d.Type.Category + ' ' + d.Type.Identifier + '</td><td>' + d.Identifier + '</td><td>' + fieldsString + '</td><td><button id="updatebtn' + i + '"class="btn btn-link"><span class="glyphicon glyphicon-pencil"></span></button><button id="btn' + i + '" class="btn btn-link"><span class="glyphicon glyphicon-remove-sign"></span></button></td></tr>'));
                        $('#btn' + i).one('click', function (e) {
                            RemoveMapping(d);
                        });
                        $('#updatebtn' + i).on('click', function (e) {
                            UpdateMapping(d);
                        });

                    });

                });

            });

        }
        
        function UpdateTypeMappings() {
            var vals = $('#types').val().split('~');

            for (var i = 0; i < udts.length; ++i) {
                if (vals[0] == udts[i].Category && vals[1] == udts[i].Identifier) {
                    $('#fields').empty();
                    $.each(udts[i].Fields, function (j, f) {
                        $('#fields').append($('<li class="list-group-item"><label>' + f.Type.Category + ' ' + f.Type.Identifier + ' ' + f.Identifier + ':</label><input id="input' + j + '" class="form-control" type="text"/></li>'));

                    });
                }
            }

        }

        function RemoveMapping(data) {
                dataHub.removeMapping(data).done(function () {
                    GetData();
                });
        
        }
        
        function UpdateMapping(data) {

                dataHub.removeMapping(data);
                for (var i = 0; i < mappings.length; ++i) {
                    if (mappings[i].Identifier == data.Identifier)
                        mappings.splice(i, 1);
                }
                $('#identifier').val(data.Identifier);
                $('#types option').filter(function () {
                    return ($(this).text() == data.Type.Category + ' ' + data.Type.Identifier); //To select Blue
                }).prop('selected', true);
                UpdateTypeMappings();
                $.each($('#fields input[type="text"]'), function (i, d) {
                    $(d).val(data.FieldMappings[i].Expression);
                });

           
        }

        
        // Functions that validates that the input fields have text
        function MappingValidation() {
            var alerts = 0;
            $.each($('input[type=text]'), function (i, d) {
                if ($(d).val() == '') {
                    $(d).css('border-color', 'red');
                    ++alerts;
                }
                else
                    $(d).css('border-color', '');
            });

            if (alerts > 0) {
                alert("Missing data, Please enter data in the highlighted fields before proceeding!");
                return false;
            }
            return true;
        }

    </script>
}
